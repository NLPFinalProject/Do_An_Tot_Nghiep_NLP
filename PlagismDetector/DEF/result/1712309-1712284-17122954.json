{"file1": ["Project 01RECOMMENDER SYSTEMS SPARKProject 1: RECOMMENDER SYSTEMS SPARK", "SPARSE FULLY-CONNECTED\u27a2 Danh s\u00e1ch th\u00e0nh vi\u00eanNGUY\u1ec4N HO\u00c0NG TU\u1ea4N C\u01af\u1edcNG", "HO\u00c0NG GIA B\u1ea2ONGUY\u1ec4N THANH B\u00ccNHProject 1: RECOMMENDER SYSTEMS SPARK", "SPARSE FULLY-CONNECTEDSPARSE FC (SPARSE FULLY-CONNECTED)I. \u00dd t\u01b0\u1edfng ch\u00ednh c\u1ee7a ph\u01b0\u01a1ng ph\u00e1p", "- C\u1ea3i ti\u1ebfn d\u1ef1a tr\u00ean ph\u01b0\u01a1ng ph\u00e1p I-AutoRec", "T\u1ed5ng quan v\u1ec1 I-AutoRecTa c\u00f3 m ng\u01b0\u1eddi d\u00f9ng, n m\u1eb7t h\u00e0ng, v\u00e0 m\u1ed9t ma tr\u1eadn R ch\u1ee9a c\u00e1c \u0111\u00e1nh gi\u00e1 m ng\u01b0\u1eddi d\u00f9ng \u0111\u1ed1i v\u1edbi n m\u1eb7t h\u00e0ng \u0111\u00f3.", "M\u1ed7i m\u1eb7t h\u00e0ng i c\u00f3 m\u1ed9t vec-t\u01a1 \u0111\u00e1nh gi\u00e1  (r  (i)) c\u1ee7a m ng\u01b0\u1eddi d\u00f9ng, r  (i)=  (R 1 i,\u2026, Rmi)", "M\u1ee5c ti\u00eau l\u00e0 thi\u1ebft k\u1ebf m\u1ed9t m\u00f4 h\u00ecnh t\u1ef1 \u0111\u1ed9ng m\u00e3 ho\u00e1 d\u1ef1a tr\u00ean t\u1eebng m\u1eb7t h\u00e0ng i, nh\u1eadn input l\u00e0 t\u1eebng vector r  (i), chi\u1ebfu n\u00f3 sang m\u1ed9t mi\u1ec1n kh\u00f4ng gian ti\u1ec1m \u1ea9n c\u00f3 s\u1ed1 chi\u1ec1u th\u1ea5p, sau \u0111\u00f3 t\u00e1i t\u1ea1o l\u1ea1i vec-t\u01a1 r  (i) \u0111\u00f3 trong mi\u1ec1n kh\u00f4ng gian \u0111\u1ea7u ra, ta s\u1ebd d\u1ef1 \u0111o\u00e1n \u0111\u01b0\u1ee3c c\u00e1c \u0111\u00e1nh gi\u00e1 ch\u01b0a c\u00f3 c\u1ee7a kh\u00e1ch h\u00e0ng \u0111\u1ed1i v\u1edbi m\u1eb7t h\u00e0ng i \u0111\u00f3", "H\u00ecnh 1.M\u00f4 h\u00ecnh Item-based AutoRec.H\u00ecnh tr\u00f2n m\u00e0u x\u00e1m th\u1ec3 hi\u1ec7n ng\u01b0\u1eddi d\u00f9ng c\u00f3 \u0111\u00e1nh gi\u00e1 m\u1eb7t h\u00e0ng i n\u00e0y, h\u00ecnh tr\u00f2n tr\u1eafng th\u1ec3 hi\u1ec7n ng\u01b0\u1eddi d\u00f9ng \u0111\u00f3 kh\u00f4ng \u0111\u00e1nh gi\u00e1 m\u1eb7t h\u00e0ng i n\u00e0y, h\u00ecnh tr\u00f2n xanh l\u00e0 l\u1edbp ti\u1ec1m \u1ea9n c\u00f3 s\u1ed1 chi\u1ec1u th\u1ea5p.", "C\u00e1c m\u0169i t\u00ean \u0111ang th\u1ec3 hi\u1ec7n qu\u00e1 tr\u00ecnh h\u1ecdc  (lan truy\u1ec1n ng\u01b0\u1ee3c) \u0111\u1ec3 c\u1eadp nh\u1eadt tr\u1ecdng s\u1ed1.", "Ch\u1ec9 c\u00f3 c\u00e1c h\u00ecnh tr\u00f2n x\u00e1m m\u1edbi \u0111\u01b0\u1ee3c quan t\u00e2m \u0111\u1ec3 lan truy\u1ec1n ng\u01b0\u1ee3c  (m\u0169i t\u00ean li\u1ec1n), c\u00e1c h\u00ecnh tr\u00f2n tr\u1eafng th\u00ec kh\u00f4ng quan t\u00e2m  (m\u0169i t\u00ean n\u00e9t \u0111\u1ee9t)", "H\u00e0m \u0111\u1ec3 t\u00e1i t\u1ea1o l\u1ea1i c\u00e1c vec-t\u01a1 \u0111\u1ea7u v\u00e0o r:", "Project 1: RECOMMENDER SYSTEMS SPARKSPARSE FULLY-CONNECTEDTa mu\u1ed1n c\u1ef1c ti\u1ec3u ho\u00e1 \u0111\u1ed9 l\u1ed7i c\u1ee7a qu\u00e1 tr\u00ecnh h\u1ecdc", "K\u00ed hi\u1ec7u F \u1edf \u0111\u00e2y ngh\u0129a l\u00e0 t\u00ednh norm-2 to\u00e0n b\u1ed9 ma tr\u1eadn", "Ch\u1ec9 t\u00ednh norm-2 c\u00e1c d\u1ef1 \u0111o\u00e1n c\u1ee7a nh\u1eefng \u0111\u00e1nh gi\u00e1 c\u00f3 t\u1ed3n t\u1ea1i ban \u0111\u1ea7u  (hay ta d\u1ec5 hi\u1ec3u h\u01a1n, l\u00e0 h\u1ecdc l\u00e0m sao cho c\u00e1c d\u1ef1 \u0111o\u00e1n c\u1ee7a c\u00e1c \u0111\u00e1nh gi\u00e1 ban \u0111\u1ea7u, sau khi \u0111\u01b0\u1ee3c t\u00e1i t\u1ea1o s\u1ebd g\u1ea7n \u0111\u00fang v\u1edbi \u0111\u00e1nh gi\u00e1 \u0111\u1ea7u v\u00e0o nh\u1ea5t)", "Sparse FCC\u00f3 ki\u1ebfn tr\u00fac m\u1ea1ng t\u01b0\u01a1ng t\u1ef1 ki\u1ebfn tr\u00fac c\u1ee7a I-AutoRec, nh\u01b0ng ma tr\u1eadn tr\u1ecdng s\u1ed1 W, V \u0111\u01b0\u1ee3c tham s\u1ed1 ho\u00e1 l\u1ea1i b\u1eb1ng c\u00e1ch:", "- Ta s\u1ebd nh\u1eadn ma tr\u1eadn ki\u1ec3u Hadamard ma tr\u1eadn W, V v\u1edbi ma tr\u1eadn tr\u1ecdng s\u1ed1 kernel  (w  hat) \u0111\u1ec3 c\u00f3 \u0111\u01b0\u1ee3c ma tr\u1eadn th\u1ec3 hi\u1ec7n c\u00e1c li\u00ean k\u1ebft th\u01b0a th\u1edbt.", "T\u1eebng gi\u00e1 tr\u1ecb c\u1ee7a w   hat s\u1ebd \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng c\u00f4ng th\u1ee9c:", "D l\u00e0 kho\u1ea3ng c\u00e1ch 2C\u00e1ch t\u00ednh \u0111\u1ed9 l\u1ed7i sau m\u1ed7i m\u1eabu hu\u1ea5n luy\u1ec7n c\u0169ng c\u00f3 thay \u0111\u1ed5i nh\u1ecf so v\u1edbi ph\u01b0\u01a1ng ph\u00e1p IAutoRec, \u0111\u00f3 l\u00e0 vi\u1ec7c c\u1ed9ng th\u00eam sai s\u1ed1 c\u1ee7a ma tr\u1eadn tr\u1ecdng s\u1ed1 kernel  (w  hat) \u0111\u1ec3 h\u1ecdc trong qu\u00e1 tr\u00ecnh lan truy\u1ec1n ng\u01b0\u1ee3c n\u1eefa:", "\u0110\u00e2y ch\u00ednh l\u00e0 t\u1ed5ng norm-2 c\u1ee7a ma tr\u1eadn W v\u00e0 V  (gi\u1ed1ng nh\u01b0 trong h\u00e0m c\u1ef1c ti\u1ec3u \u0111\u1ed9 l\u1ed7i ph\u01b0\u01a1ng ph\u00e1p I-AutoRec b\u00ean tr\u00ean).", "\u03bb2> 0 l\u00e0 tham s\u1ed1 ki\u1ec3m so\u00e1t overfitting c\u1ee7a m\u00f4 h\u00ecnh", "Project 1: RECOMMENDER SYSTEMS SPARKSPARSE FULLY-CONNECTED\u0110\u00e2y l\u00e0 norm-2 c\u1ee7a ma tr\u1eadn w   hat. \u03bb0 l\u00e0 tham s\u1ed1 th\u1ec3 hi\u1ec7n m\u1eadt \u0111\u1ed9 c\u1ee7a d\u1eef li\u1ec7u trong ma tr\u1eadn user-item ban \u0111\u1ea7u", "C\u00f4ng th\u1ee9c \u0111\u1ecbnh ngh\u0129a m\u1ea1ng n\u01a1-ron kernel c\u00f3 d chi\u1ec1u", "\u0110\u1ecbnh ngh\u0129a h\u00e0m kernel:N\u1ebfu l\u00e0 m\u1ea1ng fully-connected, ta cho h\u00e0m \u03a6 th\u00e0nh h\u00e0m tuy\u1ebfn t\u00ednh  (\u03a6  (x)= x), tham s\u1ed1 alphai= 1,", "h\u00e0m K t\u00edch b\u1eb1ng t\u00edch v\u00f4 h\u01b0\u1edbng, ta s\u1ebd c\u00f3 \u0111\u01b0\u1ee3c nh\u01b0 sau:", "L\u00fac n\u00e0y  (3) s\u1ebd \u0111\u01b0\u1ee3c bi\u1ec3u di\u1ec5n nh\u01b0 m\u00f4 h\u00ecnh m\u1ea1ng d\u01b0\u1edbi \u0111\u00e2y:", "Project 1: RECOMMENDER SYSTEMS SPARKSPARSE FULLY-CONNECTEDGi\u1ea3 s\u1eed t\u1ea7ng  (l\u2013 1) c\u00f3 m ph\u1ea7n t\u1eed, t\u1ea7ng  (l) c\u00f3 n ph\u1ea7n t\u1eed", "L\u00fac n\u00e0y, thay v\u00ec ch\u1ec9 c\u00f3 1 ma tr\u1eadn tr\u1ecdng s\u1ed1 W  (mx n) gi\u1eefa 2 t\u1ea7ng li\u00ean ti\u1ebfp trong m\u1ea1ng, ta \u0111\u00e3 t\u00e1ch ra \u0111\u01b0\u1ee3c 2 ma tr\u1eadn kh\u00e1c nhau: ma tr\u1eadn U  (m x d) v\u00e0 ma tr\u1eadn V  (dx n).", "C\u00f3 th\u1ec3 gi\u1ea3i th\u00edch \u0111i\u1ec1u n\u00e0y nh\u01b0 l\u00e0 s\u1ef1 ph\u00e2n r\u00e3 ma tr\u1eadn W l\u1edbn th\u00e0nh 2 ma tr\u1eadn con nh\u1ecf h\u01a1n.", "Thao t\u00e1c n\u00e0y m\u1ea1ng l\u1ea1i l\u1ee3i \u00edch:- B\u1ea3n ch\u1ea5t ma tr\u1eadn item-user ban \u0111\u1ea7u c\u00f3 \u0111\u1ed9 th\u01b0a th\u1edbt c\u1ef1c cao, v\u00e0 \u0111\u00e1nh gi\u00e1 c\u1ee7a phim c\u0169ng d\u1ef1a v\u00e0o s\u1ed1 l\u01b0\u1ee3ng t\u01b0\u01a1ng \u0111\u1ed1i nh\u1ecf c\u00e1c t\u00ednh n\u0103ng  (VD: th\u1ec3 lo\u1ea1i, di\u1ec5n vi\u00ean\u2026).", "N\u00ean ta gi\u1ea3m chi\u1ec1u xu\u1ed1ng \u0111\u1ec3 t\u0103ng t\u00ednh t\u1ed5ng qu\u00e1t ho\u00e1, t\u00ecm ra m\u1ed7i t\u01b0\u01a1ng quan gi\u1eefa c\u00e1c \u0111\u00e1nh gi\u00e1, \u1edf kh\u00f4ng gian nh\u1ecf h\u01a1n", "- Ta th\u1ea5y s\u1ed1 l\u01b0\u1ee3ng tham s\u1ed1 c\u00f3 \u0111\u01b0\u1ee3c=  (m x d+ dx n) < m x n \u2192 d<  (m* n)/  (m+ n)", "(*).N\u1ebfu ta ch\u1ecdn d tho\u1ea3 \u0111i\u1ec1u ki\u1ec7n  (*) ta th\u1ea5y s\u1ed1 l\u01b0\u1ee3ng tham s\u1ed1 c\u1ee7a m\u00f4 h\u00ecnh gi\u1ea3m xu\u1ed1ng \u0111\u00e1ng k\u1ec3, gi\u00fap t\u0103ng t\u1ed1c kh\u1ea3 n\u0103ng h\u1ecdc", "Project 1: RECOMMENDER SYSTEMS SPARKSPARSE FULLY-CONNECTEDL\u1ef1a ch\u1ecdn kernel sao cho c\u00e1c n\u01a1-ron \u1edf c\u00e0ng xa th\u00ec li\u00ean k\u1ebft s\u1ebd c\u00e0ng y\u1ebfu, c\u00e1c n\u01a1-ron \u1edf c\u00e0ng g\u1ea7n th\u00ec s\u1ebd li\u00ean k\u1ebft c\u00e0ng m\u1ea1nh  (\u0111\u00e2y l\u00e0 l\u00ed do ta ch\u1ecdn h\u00e0m kernel Kfs b\u00ean tr\u00ean)", "2/ K\u1ebft qu\u1ea3 th\u1ef1c nghi\u1ec7mB\u1ea3ng 1.So s\u00e1nh c\u00e1c ph\u01b0\u01a1ng ph\u00e1p kh\u00e1c nhau tr\u00ean c\u00e1c t\u1eadp d\u1eef li\u1ec7u MovieLens.", "Gi\u00e1 tr\u1ecb trong b\u1ea3ng l\u00e0 gi\u00e1 tr\u1ecb RMSE trung b\u00ecnh c\u1ee7a c\u00e1c \u0111\u00e1nh gi\u00e1 c\u1ea7n \u0111i\u1ec1n khuy\u1ebft", "(gi\u00e1 tr\u1ecb c\u00e0ng th\u1ea5p c\u00e0ng t\u1ed1t) t\u1eeb ph\u01b0\u01a1ng ph\u00e1p 5- FoldsCross-Validation.", "\u0110\u1ed1i v\u1edbi t\u1eadp d\u1eef li\u1ec7u ML-10 M v\u00e0 ML-1 M ta chia t\u1eadp train/ validation theo t\u1ec9 l\u1ec7 90/10,", "v\u1edbi t\u1eadp d\u1eef li\u1ec7u ML-100 K ta chia t\u1eadp train/ validation theo t\u1ec9 l\u1ec7 80/20.", "Gi\u00e1 tr\u1ecb n\u1eb1m trong d\u1ea5u ngo\u1eb7c \u0111\u01a1n sau t\u00ean m\u1ed7i ph\u01b0\u01a1ng ph\u00e1p l\u00e0 s\u1ed1 t\u1ea7ng \u1ea9n c\u1ee7a m\u1ea1ng n\u01a1-ron", "Project 1: RECOMMENDER SYSTEMS SPARKSPARSE FULLY-CONNECTEDB\u1ea3ng 2.Ph\u01b0\u01a1ng ph\u00e1p SparseFC \u0111\u00e3 gi\u1ea3m \u0111\u01b0\u1ee3c ph\u00e9p to\u00e1n nh\u00e2n t\u00edch lu\u1ef9  (MACs)", "cho c\u00e1c \u0111\u00e1nh gi\u00e1 c\u1ea7n \u0111i\u1ec1n khuy\u1ebftProject 1: RECOMMENDER SYSTEMS SPARK", "SPARSE FULLY-CONNECTED3/ \u01afu, nh\u01b0\u1ee3c \u0111i\u1ec3m c\u1ee7a ph\u01b0\u01a1ng ph\u00e1p Sparse FC", "Nh\u01b0\u1ee3c \u0111i\u1ec3m- Gi\u00fap t\u0103ng t\u1ed1c kh\u1ea3 n\u0103ng d\u1ef1 \u0111o\u00e1n", "- Ch\u1eadm h\u01a1n so v\u1edbi I-AutoRec  (m\u00f4 c\u1ee7a m\u00f4 h\u00ecnh, do gi\u1ea3m \u0111\u01b0\u1ee3c MACs", "- Kh\u1ea3 n\u0103ng d\u1ef1 \u0111o\u00e1n t\u1ed1t h\u01a1n so v\u1edbi m\u1ed9t s\u1ed1 c\u00e1c ph\u01b0\u01a1ng ph\u00e1p ti\u00ean ti\u1ebfn kh\u00e1c", "II.C\u00e0i \u0111\u1eb7t thu\u1eadt to\u00e1n tr\u00ean Google Colab h\u00ecnh c\u01a1 b\u1ea3n) m\u1ed9t x\u00edu trong qu\u00e1 tr\u00ecnh h\u1ecdc, do c\u00f3 nhi\u1ec1u tham s\u1ed1 h\u01a1m", "Source code t\u1eeb https://github.com/lorenzMuller/kernelNet MovieLens1. Load data\u2022 Input:", "path: \u0111\u01b0\u1eddng d\u1eabn t\u1edbi t\u1ec7p d\u1eef li\u1ec7u valfrac: t\u1ef7 l\u1ec7 \u0111\u1ec3 ph\u00e2n chia t\u1eadp validation  (0.1= 10% validation, 90% training)", "delimeter: c\u00e1c k\u00fd hi\u1ec7u ph\u00e2n chia d\u1eef li\u1ec7u trong m\u1ed9t h\u00e0ng  (\u201c::", "\u201d, \u201c, \u201d, \u201d: \u201d\u2026.)seed: L\u01b0u l\u1ea1i k\u1ebft qu\u1ea3 cho l\u1ea7n random  (seed= 1234)", "transpose: Chuy\u1ec3n \u0111\u1ed5i ma tr\u1eadn \u0111\u1ea7u ra, t\u1eeb user sang item", "\u2022 Output:train ratings, valid ratings: ma tr\u1eadn c\u00f3 c\u00e1c c\u1ed9t l\u00e0 user, c\u00e1c h\u00e0ng l\u00e0 item, v\u00e0 tr\u1ecdng s\u1ed1 l\u00e0 c\u00e1c ratings", "2. Setup kernel kernel: Setup kernel theo c\u00f4ng th\u1ee9c v\u1edbi u l\u00e0 input vector, v l\u00e0 output vector tf.maximum  (0., 1.", "\u2013  (tf.norm  (u \u2013 v, ord= 2, axis= 2))** 2)", "kernel layer:\u2022 Input:x: input  [batch, channels]n   hid: s\u1ed1 nodes \u1ea9n n   dim: s\u1ed1 chi\u1ec1u \u0111\u1ec3 \u00e1p kernel v\u00e0o activation: output activation", "\u2022 Output:layer output, regularization term  (\u0111\u1ea1i l\u01b0\u1ee3ng \u0111i\u1ec1u ch\u1ec9nh)", "Project 1: RECOMMENDER SYSTEMS SPARKSPARSE FULLY-CONNECTED3. Setup model", "\u00c1p kernel v\u00e0o t\u1eebng layerT\u00ednh to\u00e1n \u0111\u1ed9 l\u1ed7i", "C\u00e0i h\u00e0m t\u1ed1i \u01b0u ho\u00e1 L-BFGS4. Training and testing n   epochs= n   layers* 10", "Tr\u1ea3 ra k\u1ebft qu\u1ea3 RMSE c\u1ee7a validation, RMSE c\u1ee7a training, th\u1eddi gian ch\u1ea1y trong file summary", "L\u01b0u \u00fd: M\u00f4 h\u00ecnh ch\u1ec9 ch\u1ea1y \u0111\u01b0\u1ee3c tr\u00ean tensorflow 1.14.0 ho\u1eb7c b\u00e9 h\u01a1n", "C\u00e0i \u0111\u1eb7t tr\u00ean google colab https://colab.research.google.com/drive/1hQxJbPpb8cufvFesHxzfX37A 4K s 47 MJp# scroll", "To=GbQMO 1 BJa4o0Clone source code v\u1ec1C\u00e0i l\u1ea1i m\u00f4i tr\u01b0\u1eddng tensorflow", "T\u1ea3i t\u1eadp d\u1eef li\u1ec7u MovieLens 1M v\u1ec1 v\u00e0 gi\u1ea3i n\u00e9n", "Project 1: RECOMMENDER SYSTEMS SPARKSPARSE FULLY-CONNECTED\u0110\u1ed5i path cho ph\u00f9 h\u1ee3p", "Ch\u1ea1y th\u1eedCh\u1ea1y th\u1eed nghi\u1ec7m tr\u00ean t\u1eadp movie-lens 1M.", "\u2022 K\u1ebft qu\u1ea3 ch\u1ea1y 20 epochs, v\u1edbi t\u1eadp training 90%, validation 10%", "\u2022 RMSE validation= 0.8293059\u2022 RMSE training= 0.6832043\u2022 \u0110\u00e1nh gi\u00e1 k\u1ebft qu\u1ea3 t\u01b0\u01a1ng \u0111\u1ed1i cao", "IV.C\u00e0i \u0111\u1eb7t thu\u1eadt to\u00e1n baseline c\u1ee7a apache-spark v\u00e0 m\u1ed9t \u201c SOTA\u201d kh\u00e1c tr\u00ean t\u1eadp MovieLens 1M.", "\u2022 Nh\u00f3m s\u1ebd s\u1eed d\u1ee5ng ph\u01b0\u01a1ng ph\u00e1p I-Autorec l\u00e0 ti\u1ec1n th\u00e2n c\u1ee7a SparseFC qua \u0111\u00f3 c\u00f3 th\u1ec3 d\u1ec5 d\u00e0ng so s\u00e1nh v\u1ec1 m\u1eb7t hi\u1ec7u n\u0103ng gi\u1eefa 2 ph\u01b0\u01a1ng ph\u00e1p c\u00f3 s\u1ef1 ti\u1ebfp n\u1ed1i v\u1edbi nhau.", "Dataset:\u2022 T\u1eadp d\u1eef li\u1ec7u MovieLens 1M \u0111\u01b0\u1ee3c chia th\u00e0nh 2 t\u1eadp train v\u00e0 test theo t\u1ec9 l\u1ec7 8 0:2 0.", "\u2022 Ph\u01b0\u01a1ng ph\u00e1p baseline nh\u00f3m ch\u1ecdn ALS \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 b\u1edfi b\u1ed9 th\u01b0 vi\u1ec7n pyspark.", "Project 1: RECOMMENDER SYSTEMS SPARKSPARSE FULLY-CONNECTEDAlgorithmBaselineI-AutorecMovilens 1MMovilens 1M", "\uf0f0 C\u00f3 th\u1ec3 nh\u1eadn th\u1ea5y I-Autorec c\u00f3 s\u1ef1 c\u1ea3i ti\u1ebfn h\u01a1n so v\u1edbi thu\u1eadt to\u00e1n m\u1eb7c \u0111\u1ecbnh ALS c\u1ee7a pyspark.", "V. \u1ee8ng d\u1ee5ng v\u00e0o m\u1ed9t b\u1ed9 d\u1eef li\u1ec7u kh\u00e1c", "\u27a2 Nh\u00f3m ch\u1ecdn t\u1eadp MovieLens-10 M nh\u01b0ng colab kh\u00f4ng th\u1ec3 load data l\u00ean v\u00ec gi\u1edbi h\u1ea1n", "RAM, n\u00ean nh\u00f3m \u0111\u00e3 ch\u1ecdn t\u1eadp MovieLens-100k. Tuy s\u1ed1 record nh\u1ecf h\u01a1n nh\u01b0ng kh\u00e1c bi\u1ec7t v\u1ec1 m\u1eb7t \u0111\u1ed9 d\u00e0y c\u1ee7a ma tr\u1eadnitem-user.", "\u2022 MovieLens-100 k o S\u1ed1 rating thu th\u1eadp \u0111\u01b0\u1ee3c: 100.000 o S\u1ed1 user: 1000 o S\u1ed1 item  (phim): 1700", "\uf0f0 S\u1ed1 rating n\u1ebfu \u0111\u01b0\u1ee3c l\u1eafp \u0111\u1ea7y: 1000*1700= 1700000 \uf0f0 T\u1ef7 l\u1ec7 bao ph\u1ee7 c\u1ee7a b\u1ed9 d\u1eef li\u1ec7u:  (100000/ 17000000)* 100= 5.88%", "\u2022 MovieLens\u2013 1 M:o S\u1ed1 rating thu th\u1eadp \u0111\u01b0\u1ee3c: 1.000.000 o S\u1ed1 user: 6000 o S\u1ed1 item  (phim): 4000", "\uf0f0 S\u1ed1 rating n\u1ebfu \u0111\u01b0\u1ee3c l\u1eafp \u0111\u1ea7y: 6000*4000= 24.000.000\uf0f0 T\u1ef7 l\u1ec7 bao ph\u1ee7 c\u1ee7a b\u1ed9 d\u1eef li\u1ec7u:  (1000000/ 24000000)* 100= 4.17%", "\uf0f0 T\u1eadp 100k th\u01b0a h\u01a1n nhi\u1ec1u so v\u1edbi t\u1eadp 1M.", "Nh\u01b0ng c\u00f3 m\u1ed9t y\u1ebfu \u0111i\u1ec3m \u1edf ch\u1ed7 s\u1ed1 user nh\u1ecf h\u01a1n s\u1ed1 item n\u00ean vi\u1ec7c th\u01b0a h\u01a1n l\u00e0 d\u1ec5 hi\u1ec3u nh\u01b0ng v\u1eabn chi\u1ebfm t\u1ec9 l\u1ec7 cao h\u01a1n so v\u1edbi 1M t\u1ee9c t\u1eadp 1M c\u00e0ng th\u01b0a h\u01a1n so v\u1edbi con s\u1ed1 \u0111ang hi\u1ec3n th\u1ecb.", "Project 1: RECOMMENDER SYSTEMS SPARKSPARSE FULLY-CONNECTEDK\u1ebft qu\u1ea3 th\u1ef1c nghi\u1ec7m:", "Ph\u01b0\u01a1ng ph\u00e1pBaseline  (ALS)I-AutorecSparseFCT\u1eeb b\u1ea3ng tr\u00ean ta nh\u1eadn ra k\u1ebft lu\u1eadn nh\u01b0 sau:", "o V\u1edbi c\u1ea3 3 ph\u01b0\u01a1ng ph\u00e1p th\u00ec t\u1eadp d\u1eef li\u1ec7u l\u1edbn h\u01a1n v\u1edbi nhi\u1ec1u th\u00f4ng tin h\u01a1n nh\u01b0ng th\u01b0a h\u01a1n th\u00ec t\u1ed1t h\u01a1n so v\u1edbi t\u1eadp t\u1eadp d\u1eef li\u1ec7u nh\u1ecf v\u00e0 \u00edt th\u00f4ng tin.", "o Ta th\u1ea5y s\u1ef1 c\u1ea3i thi\u1ec7n r\u00f5 r\u1ec7t c\u1ee7a Sparse FC so v\u1edbi I-Autorec phi\u00ean b\u1ea3n c\u0169 tr\u01b0\u1edbc \u0111\u00f3 nh\u1edd v\u00e0o vi\u1ec7c c\u1ea3i ti\u1ebfn th\u00eam kernel.", "o Do t\u1eadp d\u1eef li\u1ec7u ML-100 k nh\u00f3m ch\u1ecdn ch\u01b0a th\u1ef1c s\u1ef1 chu\u1ea9n x\u00e1c v\u1ec1 m\u1eb7t logic n\u00ean \u1ea3nh h\u01b0\u1edfng kh\u00e1 nhi\u1ec1u \u0111\u1ebfn vi\u1ec7c so s\u00e1nh hi\u1ec7u n\u0103ng gi\u1eefa c\u00e1c t\u1eadp d\u1eef li\u1ec7u kh\u00e1c nhau tr\u00ean c\u00f9ng m\u1ed9t ph\u01b0\u01a1ng ph\u00e1p.", "Source code:https://drive.google.com/drive/folders/1JBvWNNqnf9B1WNEU2iKVRdLz0tHWi0w?usp=sharingT\u00e0i li\u1ec7u tham kh\u1ea3o:\u25aa Kernelized Synaptic Weight Matrices", "Lorenz K. MullerJulien N.P. MartelGiacomo Indiveri\u25aa AutoRec: Autoencoders Meet Collaborative Filtering", "Suvash SedhainAditya Krishna MenonScott SannerLexing XieProject 1: RECOMMENDER SYSTEMS SPARK", "SPARSE FULLY-CONNECTED lorenzMuller/ kernelNet  MovieLens  (github.com)"], "ListFileName": ["https://qastack.vn/programming/58441514/why-is-tensorflow-2-much-slower-than-tensorflow-1"], "File1Name": "1712309-1712284-1712295.pdf", "ListFile": [{"data": ["T\u1ea1i sao TensorFlow 2 ch\u1eadm h\u01a1n nhi\u1ec1u so v\u1edbi TensorFlow 1?", "L\u1eadp tr\u00ecnhTh\u1ebbAccountSign InSignupT\u1ea1i sao TensorFlow 2 ch\u1eadm h\u01a1n nhi\u1ec1u so v\u1edbi TensorFlow 1?", "137N\u00f3 \u0111\u01b0\u1ee3c nhi\u1ec1u ng\u01b0\u1eddi d\u00f9ng tr\u00edch d\u1eabn l\u00e0 l\u00fd do \u0111\u1ec3 chuy\u1ec3n sang Pytorch, nh\u01b0ng t\u00f4i v\u1eabn ch\u01b0a t\u00ecm th\u1ea5y l\u1eddi bi\u1ec7n minh/ gi\u1ea3i th\u00edch cho vi\u1ec7c hy sinh ch\u1ea5t l\u01b0\u1ee3ng th\u1ef1c t\u1ebf quan tr\u1ecdng nh\u1ea5t, t\u1ed1c \u0111\u1ed9, \u0111\u1ec3 th\u1ef1c hi\u1ec7n h\u00e1o h\u1ee9c.", "D\u01b0\u1edbi \u0111\u00e2y l\u00e0 hi\u1ec7u su\u1ea5t \u0111i\u1ec3m chu\u1ea9n m\u00e3, TF1 so v\u1edbi TF2- v\u1edbi TF1 ch\u1ea1y nhanh h\u01a1n t\u1eeb 47% \u0111\u1ebfn 276%.", "C\u00e2u h\u1ecfi c\u1ee7a t\u00f4i l\u00e0: n\u00f3 l\u00e0 g\u00ec, \u1edf c\u1ea5p \u0111\u1ed9 \u0111\u1ed3 th\u1ecb ho\u1eb7c ph\u1ea7n c\u1ee9ng, mang l\u1ea1i s\u1ef1 ch\u1eadm l\u1ea1i \u0111\u00e1ng k\u1ec3 nh\u01b0 v\u1eady?", "T\u00ecm ki\u1ebfm m\u1ed9t c\u00e2u tr\u1ea3 l\u1eddi chi ti\u1ebft- \u0111\u00e3 quen thu\u1ed9c v\u1edbi c\u00e1c kh\u00e1i ni\u1ec7m r\u1ed9ng.", "Git c\u00f3 li\u00ean quanTh\u00f4ng s\u1ed1 k\u1ef9 thu\u1eadt: CUDA 10.0.130, cuDNN 7.4.2, Python 3.7.4, Windows 10, GTX 1070", "K\u1ebft qu\u1ea3 \u0111i\u1ec3m chu\u1ea9n:C\u1eacP NH\u1eacT: V\u00f4 hi\u1ec7u ho\u00e1 th\u1ef1c thi h\u00e1o h\u1ee9c cho m\u1ed7i m\u00e3 d\u01b0\u1edbi \u0111\u00e2y kh\u00f4ng gi\u00fap \u0111\u1ee1.", "Tuy nhi\u00ean, h\u00e0nh vi kh\u00f4ng nh\u1ea5t qu\u00e1n: \u0111\u00f4i khi ch\u1ea1y trong ch\u1ebf \u0111\u1ed9 bi\u1ec3u \u0111\u1ed3 gi\u00fap \u0111\u00e1ng k\u1ec3, nh\u1eefng l\u1ea7n kh\u00e1c n\u00f3 ch\u1ea1y ch\u1eadm h\u01a1n so v\u1edbi Eager.", "V\u00ec c\u00e1c nh\u00e0 ph\u00e1t tri\u1ec3n TF kh\u00f4ng xu\u1ea5t hi\u1ec7n \u1edf b\u1ea5t c\u1ee9 \u0111\u00e2u, t\u00f4i s\u1ebd t\u1ef1 m\u00ecnh \u0111i\u1ec1u tra v\u1ea5n \u0111\u1ec1 n\u00e0y- c\u00f3 th\u1ec3 theo d\u00f5i ti\u1ebfn tr\u00ecnh trong v\u1ea5n \u0111\u1ec1 Github \u0111\u01b0\u1ee3c li\u00ean k\u1ebft.", "C\u1eacP NH\u1eacT 2: t\u1ea5n k\u1ebft qu\u1ea3 th\u1eed nghi\u1ec7m \u0111\u1ec3 chia s\u1ebb, c\u00f9ng v\u1edbi l\u1eddi gi\u1ea3i th\u00edch; n\u00ean \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n ng\u00e0y h\u00f4m nay.", "M\u00e3 \u0111i\u1ec3m chu\u1ea9n:# use tensorflow.keras... to benchmark tf.keras; used GPU for all above benchmarks", "from keras.layers import Input, Dense, LSTM, Bidirectional, Conv1D", "from keras.layers import Flatten, Dropoutfrom keras.models import Model", "from keras.optimizers import Adamimport keras.backend as Kimport numpy as np", "from time import timebatch   shape=  (32, 400, 16)", "X, y= make  data  (batch  shape)", "model   small= make  small   model  (batch  shape)", "model   small.train  on  batch  (X, y)", "# skip first iteration which builds graphtimeit  (model  small.train   on  batch, 200, X, y)", "K.clear  session  ()# in my testing, kernel was restarted instead", "model   medium= make  medium   model  (batch  shape)", "model   medium.train  on  batch  (X, y)", "# skip first iteration which builds graphtimeit  (model  medium.train   on  batch, 10, X, y)", "C\u00e1c ch\u1ee9c n\u0103ng \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng:def timeit  (func, iterations,* args):", "t0= time  ()for  in range  (iterations):", "func  (* args)print  ( \"Time/ iter:%. 4 f sec\"%  ( (time  ()- t 0)/ iterations))", "def make  small   model  (batch  shape):", "ipt= Input  (batch  shape=batch  shape)", "x= Conv 1 D  (128, 400, strides= 4, padding=' same')  (ipt)", "x= Flatten  ()  (x)x= Dropout  (0.5)  (x)", "x= Dense  (64, activation=' relu')  (x)", "out= Dense  (1,activation=' sigmoid')  (x)model= Model  (ipt, out)", "model.compile  (Adam  (lr= 1 e-4),' binary  crossentropy')", "return modeldef make  medium   model  (batch  shape):", "ipt= Input  (batch  shape=batch  shape)", "x= Bidirectional  (LSTM  (512, activation=' relu', return   sequences=True))  (ipt)", "x= LSTM  (512, activation=' relu', return   sequences=True)  (x)", "x= Conv 1 D  (128, 400, strides= 4, padding=' same')  (x)", "x= Flatten  ()  (x)x= Dense  (256, activation=' relu')  (x)", "x= Dropout  (0.5)  (x)x= Dense  (128, activation=' relu')  (x)", "x= Dense  (64,activation=' relu')  (x)out= Dense  (1,", "activation=' sigmoid')  (x)model= Model  (ipt, out)", "model.compile  (Adam  (lr= 1 e-4),' binary  crossentropy')", "return modeldef make  data  (batch  shape):", "return np.random.randn  (* batch  shape), np.random.randint  (0, 2,  (batch  shape  [0], 1))", "pythontensorflowkerasperformance-testingtensorflow 2.0\u2014OverLordGoldDragonngu\u1ed3nB\u1ea1n \u0111\u00e3 bao gi\u1edd s\u1eed d\u1ee5ng cProfile lo\u1ea1i c\u00f4ng c\u1ee5 nh\u01b0 v\u1eady \u0111\u1ec3 ph\u00e2n t\u00edch ph\u1ea7n n\u00e0o l\u00e0m cho ch\u00fang kh\u00e1c nhau nh\u01b0 v\u1eady ch\u01b0a?", "\u2014zihaozhihao 18/10/19@ zihaozhihao T\u00f4i c\u00f3, m\u1eb7c d\u00f9 kh\u00f4ng ph\u1ea3i v\u00ec \u0111i\u1ec1u n\u00e0y c\u1ee5 th\u1ec3; tr\u00ean m\u1ed7i li\u00ean k\u1ebft tr\u01b0\u1edbc \u0111\u00f3 v\u00e0 vi\u1ebft m\u1ed9t tr\u00ecnh t\u1ed1i \u01b0u ho\u00e1 tu\u1ef3 ch\u1ec9nh, t\u00f4i \u0111\u00e3 quen v\u1edbi s\u1ef1 kh\u00e1c bi\u1ec7t trong c\u00e1c cu\u1ed9c g\u1ecdi, nh\u01b0ng kh\u00f4ng hi\u1ec3u t\u1ea1i sao c\u00e1i n\u00e0y ch\u1eadm h\u01a1n c\u00e1i kia- c\u0169ng kh\u00f4ng ph\u1ea3i b\u1ea5t k\u1ef3 chuy\u00ean gia kh\u00f4ng ph\u1ea3i TF n\u00e0o c\u0169ng hi\u1ec3u n\u00f3 t\u1eeb ngu\u1ed3n, m\u00e0 tr\u00ean h\u1ebft l\u00e0 m\u1ed9t m\u1edb h\u1ed7n \u0111\u1ed9n, kh\u00f4ng t\u00e0i li\u1ec7u bi\u1ec3u di\u1ec5n t\u01b0\u01a1ng \u0111\u1ed1i.", "Y\u00eau c\u1ea7u intel \u1edf c\u1ea5p \u0111\u1ed9 \u0111\u1ed3 th\u1ecb/ ph\u1ea7n c\u1ee9ng, m\u00e0 c\u00e1c tr\u00ecnh bi\u00ean d\u1ecbch s\u1ebd kh\u00f4ng cung c\u1ea5p  (theo nh\u01b0 t\u00f4i c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng ch\u00fang)", "\u2014OverLordGoldDragonphi\u00ean b\u1ea3n numpy gi\u1ed1ng nhau trong c\u1ea3 hai th\u1eed nghi\u1ec7m?", "\u2014chabirOuch....N\u1ebfu m\u1ed9t m\u00ecnh Keras c\u0169 \u0111\u00e3 ch\u1eadm h\u01a1n \u0111\u00e1ng k\u1ec3 so v\u1edbi PyTorch, h\u00e3y t\u01b0\u1edfng t\u01b0\u1ee3ng ngay b\u00e2y gi\u1edd.", "\u2014Daniel M\u00f6llerquy m\u00f4 v\u1ea5n \u0111\u1ec1 v\u1edbi k\u00edch th\u01b0\u1edbc m\u00f4 h\u00ecnh? b\u1ea1n c\u0169ng \u0111\u00e3 th\u1eed ch\u1ea1y \u0111i\u1ec3m chu\u1ea9n t\u01b0\u01a1ng t\u1ef1 tr\u00ean c\u00e1c h\u1ec7 \u0111i\u1ec1u h\u00e0nh kh\u00e1c ch\u01b0a?", "\u2014okawoC\u00e2u tr\u1ea3 l\u1eddi:76C\u1eacP NH\u1eacT 18/2/2020: T\u00f4i \u0111\u00e3 chu\u1ea9n b\u1ecb 2.1 v\u00e0 2.1 m\u1ed7i \u0111\u00eam; k\u1ebft qu\u1ea3 l\u00e0 h\u1ed7n h\u1ee3p.", "T\u1ea5t c\u1ea3 tr\u1eeb m\u1ed9t c\u1ea5u h\u00ecnh  (m\u00f4 h\u00ecnh & k\u00edch th\u01b0\u1edbc d\u1eef li\u1ec7u) \u0111\u1ec1u nhanh b\u1eb1ng ho\u1eb7c nhanh h\u01a1n nhi\u1ec1u so v\u1edbi m\u1ee9c t\u1ed1t nh\u1ea5t c\u1ee7a TF2& TF 1.", "C\u00e1i ch\u1eadm h\u01a1n v\u00e0 ch\u1eadm h\u01a1n \u0111\u00e1ng k\u1ec3 l\u00e0 Large-Large- \u0111\u1eb7c bi\u1ec7t. trong th\u1ef1c thi \u0111\u1ed3 th\u1ecb  (ch\u1eadm h\u01a1n 1.6x \u0111\u1ebfn 2.5x).", "H\u01a1n n\u1eefa, c\u00f3 s\u1ef1 kh\u00e1c bi\u1ec7t v\u1ec1 \u0111\u1ed9 t\u00e1i l\u1eadp c\u1ef1c k\u1ef3 gi\u1eefa \u0110\u1ed3 th\u1ecb v\u00e0 H\u00e1o h\u1ee9c \u0111\u1ed1i v\u1edbi m\u1ed9t m\u00f4 h\u00ecnh l\u1edbn m\u00e0 t\u00f4i \u0111\u00e3 th\u1eed nghi\u1ec7m- m\u1ed9t m\u00f4 h\u00ecnh kh\u00f4ng th\u1ec3 gi\u1ea3i th\u00edch \u0111\u01b0\u1ee3c th\u00f4ng qua t\u00ednh ng\u1eabu nhi\u00ean/ t\u00ednh to\u00e1n song song.", "Hi\u1ec7n t\u1ea1i t\u00f4i kh\u00f4ng th\u1ec3 tr\u00ecnh b\u00e0y m\u00e3 c\u00f3 th\u1ec3 l\u1eb7p l\u1ea1i cho c\u00e1c y\u00eau c\u1ea7u n\u00e0y theo c\u00e1c r\u00e0ng bu\u1ed9c v\u1ec1 th\u1eddi gian, v\u00ec v\u1eady thay v\u00e0o \u0111\u00f3 t\u00f4i th\u1ef1c s\u1ef1 khuy\u00ean b\u1ea1n n\u00ean th\u1eed nghi\u1ec7m m\u00e3 n\u00e0y cho c\u00e1c m\u00f4 h\u00ecnh c\u1ee7a ri\u00eang b\u1ea1n.", "Ch\u01b0a m\u1edf m\u1ed9t v\u1ea5n \u0111\u1ec1 Git n\u00e0o v\u1ec1 v\u1ea5n \u0111\u1ec1 n\u00e0y, nh\u01b0ng t\u00f4i \u0111\u00e3 nh\u1eadn x\u00e9t v\u1ec1 b\u1ea3n g\u1ed1c- ch\u01b0a c\u00f3 ph\u1ea3n h\u1ed3i n\u00e0o.", "T\u00f4i s\u1ebd c\u1eadp nh\u1eadt  (c\u00e1c) c\u00e2u tr\u1ea3 l\u1eddi sau khi ti\u1ebfn tr\u00ecnh \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n.", "X\u00c1C MINH:kh\u00f4ng, N\u1ebeU b\u1ea1n bi\u1ebft b\u1ea1n \u0111ang l\u00e0m g\u00ec.", "Nh\u01b0ng n\u1ebfu b\u1ea1n kh\u00f4ng, n\u00f3 c\u00f3 th\u1ec3 khi\u1ebfn b\u1ea1n m\u1ea5t r\u1ea5t nhi\u1ec1u chi ph\u00ed- b\u1eb1ng m\u1ed9t v\u00e0i l\u1ea7n n\u00e2ng c\u1ea5p GPU trung b\u00ecnh v\u00e0 trong tr\u01b0\u1eddng h\u1ee3p x\u1ea5u nh\u1ea5t l\u00e0 nhi\u1ec1u GPU.", "TR\u1ea2 L\u1edcI N\u00c0Y: nh\u1eb1m m\u1ee5c \u0111\u00edch cung c\u1ea5p m\u1ed9t m\u00f4 t\u1ea3 c\u1ea5p cao v\u1ec1 v\u1ea5n \u0111\u1ec1, c\u0169ng nh\u01b0 c\u00e1c h\u01b0\u1edbng d\u1eabn v\u1ec1 c\u00e1ch quy\u1ebft \u0111\u1ecbnh c\u1ea5u h\u00ecnh \u0111\u00e0o t\u1ea1o c\u1ee5 th\u1ec3 theo nhu c\u1ea7u c\u1ee7a b\u1ea1n.", "\u0110\u1ec3 bi\u1ebft m\u00f4 t\u1ea3 chi ti\u1ebft, m\u1ee9c \u0111\u1ed9 th\u1ea5p, bao g\u1ed3m t\u1ea5t c\u1ea3 c\u00e1c k\u1ebft qu\u1ea3 \u0111i\u1ec3m chu\u1ea9n+ m\u00e3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng, h\u00e3y xem c\u00e2u tr\u1ea3 l\u1eddi kh\u00e1c c\u1ee7a t\u00f4i.", "T\u00f4i s\u1ebd c\u1eadp nh\u1eadt  (c\u00e1c) c\u00e2u tr\u1ea3 l\u1eddi c\u1ee7a m\u00ecnh v\u1edbi th\u00f4ng tin kh\u00e1c n\u1ebfu t\u00f4i t\u00ecm hi\u1ec3u b\u1ea5t k\u1ef3- c\u00f3 th\u1ec3 \u0111\u00e1nh d\u1ea5u/  \"sao\" c\u00e2u h\u1ecfi n\u00e0y \u0111\u1ec3 tham kh\u1ea3o.", "T\u00d3M T\u1eaeT V\u1ea4N \u0110\u1ec0: nh\u01b0 \u0111\u01b0\u1ee3c x\u00e1c nh\u1eadn b\u1edfi nh\u00e0 ph\u00e1t tri\u1ec3n TensorFlow, Q. Scott Zhu, TF2 t\u1eadp trung ph\u00e1t tri\u1ec3n v\u00e0o th\u1ef1c thi Eager& t\u00edch h\u1ee3p ch\u1eb7t ch\u1ebd w/ Keras, li\u00ean quan \u0111\u1ebfn vi\u1ec7c qu\u00e9t c\u00e1c thay \u0111\u1ed5i trong ngu\u1ed3n TF- k\u1ec3 c\u1ea3 \u1edf c\u1ea5p \u0111\u1ed9 \u0111\u1ed3 th\u1ecb.", "L\u1ee3i \u00edch: m\u1edf r\u1ed9ng \u0111\u00e1ng k\u1ec3 kh\u1ea3 n\u0103ng x\u1eed l\u00fd, ph\u00e2n ph\u1ed1i, g\u1ee1 l\u1ed7i v\u00e0 tri\u1ec3n khai.", "Chi ph\u00ed c\u1ee7a m\u1ed9t s\u1ed1 trong s\u1ed1 n\u00e0y, tuy nhi\u00ean, l\u00e0 t\u1ed1c \u0111\u1ed9.", "V\u1ea5n \u0111\u1ec1, tuy nhi\u00ean, l\u00e0 kh\u00e1 ph\u1ee9c t\u1ea1p.", "\u0110\u00f3 kh\u00f4ng ch\u1ec9 l\u00e0 TF1 so v\u1edbi TF2- c\u00e1c y\u1ebfu t\u1ed1 mang l\u1ea1i s\u1ef1 kh\u00e1c bi\u1ec7t \u0111\u00e1ng k\u1ec3 v\u1ec1 t\u1ed1c \u0111\u1ed9 t\u00e0u ho\u1ea3 bao g\u1ed3m:", "TF2 so v\u1edbi TF1Ch\u1ebf \u0111\u1ed9 h\u00e1o h\u1ee9c so v\u1edbi ch\u1ebf \u0111\u1ed9 \u0111\u1ed3 th\u1ecb", "keras so v\u1edbi tf.kerasnumpyso tf.data.Datasetv\u1edbi...train   on  batch  () so v\u1edbi fit  ()", "GPU so v\u1edbi CPUmodel  (x) so model.predict  (x) v\u1edbi...", "Th\u1eadt kh\u00f4ng may, h\u1ea7u nh\u01b0 kh\u00f4ng c\u00f3 c\u00e1i n\u00e0o \u1edf tr\u00ean \u0111\u1ed9c l\u1eadp v\u1edbi c\u00e1i kia v\u00e0 m\u1ed7i c\u00e1i \u00edt nh\u1ea5t c\u00f3 th\u1ec3 g\u1ea5p \u0111\u00f4i th\u1eddi gian th\u1ef1c hi\u1ec7n so v\u1edbi c\u00e1i kh\u00e1c.", "May m\u1eafn thay, b\u1ea1n c\u00f3 th\u1ec3 x\u00e1c \u0111\u1ecbnh nh\u1eefng g\u00ec s\u1ebd ho\u1ea1t \u0111\u1ed9ng t\u1ed1t nh\u1ea5t m\u1ed9t c\u00e1ch c\u00f3 h\u1ec7 th\u1ed1ng v\u00e0 v\u1edbi m\u1ed9t v\u00e0i ph\u00edm t\u1eaft- nh\u01b0 t\u00f4i s\u1ebd tr\u00ecnh b\u00e0y.", "T\u00d4I N\u00caN L\u00c0M G\u00cc?Hi\u1ec7n t\u1ea1i, c\u00e1ch duy nh\u1ea5t l\u00e0- th\u1eed nghi\u1ec7m cho m\u00f4 h\u00ecnh, d\u1eef li\u1ec7u v\u00e0 ph\u1ea7n c\u1ee9ng c\u1ee5 th\u1ec3 c\u1ee7a b\u1ea1n.", "Kh\u00f4ng c\u1ea5u h\u00ecnh duy nh\u1ea5t s\u1ebd lu\u00f4n lu\u00f4n l\u00e0m vi\u1ec7c t\u1ed1t nh\u1ea5t- nh\u01b0ng c\u00f3 \u0111\u01b0\u1ee3c l\u00e0m v\u00e0 kh\u00f4ng l\u00e0 \u0111\u1ec3 \u0111\u01a1n gi\u1ea3n ho\u00e1 vi\u1ec7c t\u00ecm ki\u1ebfm c\u1ee7a b\u1ea1n:", ">> L\u00c0M:train   on  batch  ()+ numpy+ tf.keras+ TF1+ H\u00e1o h\u1ee9c/ \u0110\u1ed3 th\u1ecb", "train   on  batch  ()+ numpy+ tf.keras+ TF2+ \u0110\u1ed3 th\u1ecb", "fit  ()+ numpy+ tf.keras+ TF1/ TF2+ \u0110\u1ed3 th\u1ecb+ m\u00f4 h\u00ecnh & d\u1eef li\u1ec7u l\u1edbn", ">> KH\u00d4NG:fit  ()+ numpy+ kerascho c\u00e1c m\u00f4 h\u00ecnh v\u00e0 d\u1eef li\u1ec7u v\u1eeba v\u00e0 nh\u1ecf", "fit  ()+ numpy+ tf.keras+ TF1/ TF2+ H\u00e1o h\u1ee9c", "train   on  batch  ()+ numpy+ keras+ TF1+ H\u00e1o h\u1ee9c", "[ Thi\u1ebfu t\u00e1] tf.python.keras; n\u00f3 c\u00f3 th\u1ec3 ch\u1ea1y ch\u1eadm h\u01a1n 10- 100 l\u1ea7n v\u00e0 c\u00f3 r\u1ea5t nhi\u1ec1u l\u1ed7i; th\u00eam th\u00f4ng tin", "\u0110i\u1ec1u n\u00e0y bao g\u1ed3m layers, models, optimizers, & li\u00ean quan  \"out-of-box\" nh\u1eadp kh\u1ea9u s\u1eed d\u1ee5ng; ops, utils, v\u00e0 nh\u1eadp kh\u1ea9u' t\u01b0 nh\u00e2n' c\u00f3 li\u00ean quan \u0111\u1ec1u \u1ed5n- nh\u01b0ng \u0111\u1ec3 ch\u1eafc ch\u1eafn, h\u00e3y ki\u1ec3m tra alts, v\u00e0 li\u1ec7u ch\u00fang c\u00f3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng trongtf.keras", "Tham kh\u1ea3o m\u00e3 \u1edf cu\u1ed1i c\u00e2u tr\u1ea3 l\u1eddi kh\u00e1c c\u1ee7a t\u00f4i \u0111\u1ec3 bi\u1ebft thi\u1ebft l\u1eadp \u0111i\u1ec3m chu\u1ea9n m\u1eabu.", "Danh s\u00e1ch tr\u00ean ch\u1ee7 y\u1ebfu d\u1ef1a tr\u00ean c\u00e1c b\u1ea3ng  \"L\u1ee2I \u00cdCH\" trong c\u00e2u tr\u1ea3 l\u1eddi kh\u00e1c.", "GI\u1edaI H\u1ea0N c\u1ee7a DO& DON' T tr\u00ean:C\u00e2u h\u1ecfi n\u00e0y c\u00f3 ti\u00eau \u0111\u1ec1  \"T\u1ea1i sao TF2 ch\u1eadm h\u01a1n nhi\u1ec1u so v\u1edbi TF 1?\", V\u00e0 trong khi c\u01a1 th\u1ec3 c\u1ee7a n\u00f3 li\u00ean quan \u0111\u1ebfn vi\u1ec7c \u0111\u00e0o t\u1ea1o m\u1ed9t c\u00e1ch r\u00f5 r\u00e0ng, v\u1ea5n \u0111\u1ec1 kh\u00f4ng gi\u1edbi h\u1ea1n \u1edf n\u00f3; suy lu\u1eadn c\u0169ng v\u1eady, c\u00f3 th\u1ec3 c\u00f3 s\u1ef1 kh\u00e1c bi\u1ec7t l\u1edbn v\u1ec1 t\u1ed1c \u0111\u1ed9, ngay c\u1ea3 trong c\u00f9ng m\u1ed9t phi\u00ean b\u1ea3n TF, nh\u1eadp, \u0111\u1ecbnh d\u1ea1ng d\u1eef li\u1ec7u, v.v.- xem c\u00e2u tr\u1ea3 l\u1eddi n\u00e0y.", "C\u00e1c RNN c\u00f3 kh\u1ea3 n\u0103ng thay \u0111\u1ed5i \u0111\u00e1ng k\u1ec3 l\u01b0\u1edbi d\u1eef li\u1ec7u trong c\u00e2u tr\u1ea3 l\u1eddi kh\u00e1c, v\u00ec ch\u00fang \u0111\u00e3 \u0111\u01b0\u1ee3c c\u1ea3i thi\u1ec7n trong TF2", "C\u00e1c m\u00f4 h\u00ecnh \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng ch\u1ee7 y\u1ebfu Conv1Dv\u00e0 Dense- kh\u00f4ng c\u00f3 RNN, d\u1eef li\u1ec7u/ m\u1ee5c ti\u00eau th\u01b0a th\u1edbt, \u0111\u1ea7u v\u00e0o 4/ 5D v\u00e0 c\u00e1c c\u1ea5u h\u00ecnh kh\u00e1c", "D\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o gi\u1edbi h\u1ea1n numpyv\u00e0 tf.data.Dataset, trong khi nhi\u1ec1u \u0111\u1ecbnh d\u1ea1ng kh\u00e1c t\u1ed3n t\u1ea1i; xem c\u00e2u tr\u1ea3 l\u1eddi kh\u00e1c", "GPU \u0111\u00e3 \u0111\u01b0\u1ee3c s\u1eed d\u1ee5ng; k\u1ebft qu\u1ea3 s\u1ebd kh\u00e1c nhau tr\u00ean CPU.", "Trong th\u1ef1c t\u1ebf, khi t\u00f4i \u0111\u1eb7t c\u00e2u h\u1ecfi, CUDA c\u1ee7a t\u00f4i kh\u00f4ng \u0111\u01b0\u1ee3c c\u1ea5u h\u00ecnh \u0111\u00fang v\u00e0 m\u1ed9t s\u1ed1 k\u1ebft qu\u1ea3 d\u1ef1a tr\u00ean CPU.", "T\u1ea1i sao TF2 hy sinh ch\u1ea5t l\u01b0\u1ee3ng, t\u1ed1c \u0111\u1ed9 th\u1ef1c t\u1ebf nh\u1ea5t \u0111\u1ec3 th\u1ef1c hi\u1ec7n h\u00e1o h\u1ee9c?", "R\u00f5 r\u00e0ng l\u00e0 kh\u00f4ng c\u00f3- \u0111\u1ed3 th\u1ecb v\u1eabn c\u00f3 s\u1eb5n.", "Nh\u01b0ng n\u1ebfu c\u00e2u h\u1ecfi l\u00e0  \"t\u1ea1i sao h\u00e1o h\u1ee9c c\u1ea3\":", "G\u1ee1 l\u1ed7i cao c\u1ea5p: b\u1ea1n c\u00f3 th\u1ec3 g\u1eb7p v\u00f4 s\u1ed1 c\u00e2u h\u1ecfi h\u1ecfi  \"l\u00e0m th\u1ebf n\u00e0o \u0111\u1ec3 t\u00f4i c\u00f3 \u0111\u01b0\u1ee3c k\u1ebft qu\u1ea3 \u0111\u1ea7u ra c\u1ee7a l\u1edbp trung gian\" ho\u1eb7c  \"l\u00e0m c\u00e1ch n\u00e0o \u0111\u1ec3 ki\u1ec3m tra tr\u1ecdng s\u1ed1\"; v\u1edbi s\u1ef1 h\u00e1o h\u1ee9c, n\u00f3  (g\u1ea7n nh\u01b0) \u0111\u01a1n gi\u1ea3n nh\u01b0.", "dict    .Ng\u01b0\u1ee3c l\u1ea1i, \u0111\u1ed3 th\u1ecb \u0111\u00f2i h\u1ecfi ph\u1ea3i l\u00e0m quen v\u1edbi c\u00e1c ch\u1ee9c n\u0103ng ph\u1ee5 tr\u1ee3 \u0111\u1eb7c bi\u1ec7t- l\u00e0m ph\u1ee9c t\u1ea1p \u0111\u00e1ng k\u1ec3 to\u00e0n b\u1ed9 qu\u00e1 tr\u00ecnh g\u1ee1 l\u1ed7i & h\u01b0\u1edbng n\u1ed9i.", "T\u1ea1o m\u1eabu nhanh h\u01a1n: theo \u00fd t\u01b0\u1edfng t\u01b0\u01a1ng t\u1ef1 nh\u01b0 tr\u00ean; hi\u1ec3u nhanh h\u01a1n= nhi\u1ec1u th\u1eddi gian h\u01a1n cho DL th\u1ef1c t\u1ebf.", "L\u00c0M TH\u1ebe N\u00c0O \u0110\u1ec2 ENAGER/ DISABLE?tf.enable   eager  execution  ()", "# TF 1; must be done before any model/ tensor creation", "tf.compat.v1.disable eager execution  () # TF 2; above holds", "TH\u00d4NG TIN B\u1ed4 SUNG:C\u1ea9n th\u1eadn v\u1edbi   on  batch  () c\u00e1c ph\u01b0\u01a1ng ph\u00e1p trong TF 2; Theo nh\u00e0 ph\u00e1t tri\u1ec3n TF, h\u1ecd v\u1eabn s\u1eed d\u1ee5ng tri\u1ec3n khai ch\u1eadm h\u01a1n, nh\u01b0ng kh\u00f4ng c\u1ed1 \u00fd- t\u1ee9c l\u00e0 n\u00f3 \u0111\u00e3 \u0111\u01b0\u1ee3c s\u1eeda.", "Xem c\u00e2u tr\u1ea3 l\u1eddi kh\u00e1c \u0111\u1ec3 bi\u1ebft chi ti\u1ebft.", "Y\u00caU C\u1ea6U \u0110\u1ec2 THI\u1ebeT B\u1eca TENSORFLOW:Vui l\u00f2ng s\u1eeda train  on  batch  () v\u00e0 kh\u00eda c\u1ea1nh hi\u1ec7u su\u1ea5t c\u1ee7a vi\u1ec7c g\u1ecdi fit  () l\u1eb7p; v\u00f2ng l\u1eb7p t\u00e0u tu\u1ef3 ch\u1ec9nh l\u00e0 quan tr\u1ecdng \u0111\u1ed1i v\u1edbi nhi\u1ec1u ng\u01b0\u1eddi, \u0111\u1eb7c bi\u1ec7t l\u00e0 \u0111\u1ed1i v\u1edbi t\u00f4i.", "Th\u00eam t\u00e0i li\u1ec7u/ t\u00e0i li\u1ec7u \u0111\u1ec1 c\u1eadp \u0111\u1ebfn nh\u1eefng kh\u00e1c bi\u1ec7t v\u1ec1 hi\u1ec7u su\u1ea5t n\u00e0y cho ki\u1ebfn \u200b\u200bth\u1ee9c c\u1ee7a ng\u01b0\u1eddi d\u00f9ng.", "C\u1ea3i thi\u1ec7n t\u1ed1c \u0111\u1ed9 th\u1ef1c hi\u1ec7n chung \u0111\u1ec3 gi\u1eef cho peeps kh\u00f4ng nh\u1ea3y sang Pytorch.", "L\u1edcI C\u1ea2M \u01a0N: Nh\u1eddQ. Scott Zhu, nh\u00e0 ph\u00e1t tri\u1ec3n TensorFlow, \u0111\u00e3 l\u00e0m r\u00f5 chi ti\u1ebft v\u1ec1 v\u1ea5n \u0111\u1ec1 n\u00e0y.", "P. Andrey \u0111\u1ec3 chia s\u1ebb th\u1eed nghi\u1ec7m h\u1eefu \u00edch v\u00e0 th\u1ea3o lu\u1eadn.", "C\u1eacP NH\u1eacT:14/11/19- \u0111\u00e3 t\u00ecm th\u1ea5y m\u1ed9t m\u00f4 h\u00ecnh  (trong \u1ee9ng d\u1ee5ng th\u1ef1c t\u1ebf c\u1ee7a t\u00f4i) ch\u1ea1y ch\u1eadm h\u01a1n tr\u00ean TF2 cho t\u1ea5t c\u1ea3 c\u00e1c c\u1ea5u h\u00ecnh* v\u1edbi d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o Numpy.", "S\u1ef1 kh\u00e1c bi\u1ec7t dao \u0111\u1ed9ng 13-19%, trung b\u00ecnh 17%.", "S\u1ef1 kh\u00e1c bi\u1ec7t gi\u1eefa kerasv\u00e0 tf.keras, tuy nhi\u00ean, k\u1ecbch t\u00ednh h\u01a1n:", "18-40%, avg. 32%  (c\u1ea3 TF1& 2). (*- ngo\u1ea1i tr\u1eeb H\u00e1o h\u1ee9c, m\u00e0 TF2 OOM' d)", "17/11/19- c\u00e1c nh\u00e0 ph\u00e1t tri\u1ec3n \u0111\u00e3 c\u1eadp nh\u1eadt on   batch  () c\u00e1c ph\u01b0\u01a1ng th\u1ee9c trong m\u1ed9t cam k\u1ebft g\u1ea7n \u0111\u00e2y, cho bi\u1ebft \u0111\u00e3 c\u1ea3i thi\u1ec7n t\u1ed1c \u0111\u1ed9- s\u1ebd \u0111\u01b0\u1ee3c ph\u00e1t h\u00e0nh trong TF 2.1, ho\u1eb7c hi\u1ec7n c\u00f3 s\u1eb5n d\u01b0\u1edbi d\u1ea1ngtf-nightly. V\u00ec t\u00f4i kh\u00f4ng th\u1ec3 ch\u1ea1y sau, s\u1ebd tr\u00ec ho\u00e3n vi\u1ec7c chu\u1ea9n b\u1ecb cho \u0111\u1ebfn 2.1.", "20/2/20- hi\u1ec7u su\u1ea5t d\u1ef1 \u0111o\u00e1n c\u0169ng c\u00f3 gi\u00e1 tr\u1ecb; trong TF2, v\u00ed d\u1ee5, th\u1eddi gian d\u1ef1 \u0111o\u00e1n CPU c\u00f3 th\u1ec3 li\u00ean quan \u0111\u1ebfn \u0111\u1ed9t bi\u1ebfn \u0111\u1ecbnh k\u1ef3", "\u2014OverLordGoldDragonngu\u1ed3n3Th\u1ebf c\u00f2n fit  generator?...T\u00f4i h\u1ea7u nh\u01b0 kh\u00f4ng bao gi\u1edd mu\u1ed1n train   on  batchv\u00e0 qu\u1ea3n l\u00fd v\u00f2ng l\u1eb7p \u0111\u00e0o t\u1ea1o c\u1ee7a ri\u00eang m\u00ecnh qua c\u00e1c \u0111\u1ee3t l\u00e0 m\u1ed9t m\u00f4 h\u00ecnh ch\u1ed1ng l\u1edbn, r\u1ea5t l\u1edbn c\u1ea7n ph\u1ea3i tr\u00e1nh ngay c\u1ea3 v\u1edbi chi ph\u00ed l\u1edbn.", "\u2014ely@ ely N\u00f3 v\u1eabn c\u00f2n ph\u1ea3i \u0111\u01b0\u1ee3c ki\u1ec3m tra, nh\u01b0 \u0111\u00e3 l\u01b0u \u00fd trong c\u00e2u tr\u1ea3 l\u1eddi kh\u00e1c c\u1ee7a t\u00f4i- nh\u01b0ng n\u1ebfu c\u00f3 b\u1ea5t c\u1ee9 \u0111i\u1ec1u g\u00ec t\u00f4i d\u1ef1 \u0111o\u00e1n th\u00ec n\u00f3 s\u1ebd l\u00e0 fitchi ph\u00ed x\u1eed l\u00fd d\u1eef li\u1ec7u b\u1ed5 sung nh\u1ecf.", "\u0110\u1ed1i v\u1edbi c\u00e1c v\u00f2ng l\u1eb7p xe l\u1eeda, t\u00f4i \u0111\u00e3 vi\u1ebft m\u1ed9t tu\u1ef3 ch\u1ec9nh c\u1ee7a ri\u00eang m\u00ecnh m\u00e0 cu\u1ed1i c\u00f9ng \u0111\u00e3 bi\u1ebfn th\u00e0nh m\u1ed9t lo\u1ea1i API; fit  generatorthi\u1ebfu t\u00ednh h\u01b0\u1edbng n\u1ed9i, kh\u1ea3 n\u0103ng tu\u1ef3 bi\u1ebfn v\u00e0 l\u01b0u/ t\u1ea3i- v\u00ec v\u1eady t\u00f4i kh\u00f4ng ph\u1ea3i l\u00e0 m\u1ed9t ng\u01b0\u1eddi tuy\u1ec7t \u0111\u1ed1i.", "Cu\u1ed1i c\u00f9ng t\u00f4i s\u1ebd xu\u1ea5t b\u1ea3n v\u00f2ng l\u1eb7p \u0111\u00e0o t\u1ea1o c\u1ee7a m\u00ecnh, tr\u00ean Github.", "\u2014OverLordGoldDragonThi\u1ebfu n\u1ed9i t\u00e2m v\u00e0 kh\u1ea3 n\u0103ng tu\u1ef3 bi\u1ebfn l\u00e0 m\u1ed9t t\u00ednh n\u0103ng \u0111\u1ed1i v\u1edbi t\u00f4i, kh\u00f4ng ph\u1ea3i l\u00e0 m\u1ed9t l\u1ed7i.", "IDK nh\u1eefng g\u00ec b\u00ecnh lu\u1eadn l\u01b0u/ t\u1ea3i \u0111ang \u0111\u1ec1 c\u1eadp \u0111\u1ebfn?", "L\u01b0u/ t\u1ea3i trung gian trong m\u1ed9t v\u00f2ng l\u1eb7p kh\u00f4ng \u0111\u01b0\u1ee3c \u0111i\u1ec1u khi\u1ec3n b\u1edfi tr\u00ecnh t\u1ea1o d\u1eef li\u1ec7u?", "(C\u00e1 nh\u00e2n t\u00f4i c\u0169ng r\u1ea5t vui khi ch\u1ec9 d\u1ef1a v\u00e0o c\u00e1c cu\u1ed9c g\u1ecdi l\u1ea1i cho \u0111i\u1ec1u \u0111\u00f3, v\u00e0 s\u1ebd th\u1ea5y c\u1ea7n b\u1ea5t k\u1ef3 kh\u1ea3 n\u0103ng tu\u1ef3 ch\u1ec9nh n\u00e0o n\u1eefa v\u00ec m\u00f9i m\u00e3 m\u00e0 v\u00f2ng l\u1eb7p \u0111\u00e0o t\u1ea1o c\u1ee7a t\u00f4i \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf sai).", "\u2014ely@ ely \u0110i\u1ec1u \u0111\u00f3 kh\u00f4ng \u0111\u01a1n gi\u1ea3n, nh\u01b0ng n\u00f3 c\u1ea7n thi\u1ebft cho vi\u1ec7c \u0111\u00e0o t\u1ea1o c\u00e1c \u0111\u01b0\u1eddng \u1ed1ng d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o ph\u1ee9c t\u1ea1p, c\u00e1c h\u00e0m m\u1ee5c ti\u00eau v\u00e0 c\u00e1c c\u1ea5u h\u00ecnh m\u00f4 h\u00ecnh kh\u00f4ng API  (v\u00ed d\u1ee5 nh\u01b0 c\u00e1c b\u1ea3n ho\u00e0 t\u1ea5u).", "Introspection l\u00e0 ph\u1ea3i cho nhi\u1ec1u m\u1ee5c \u0111\u00edch k\u1ef9 thu\u1eadt g\u1ee1 l\u1ed7i v\u00e0 t\u00ednh n\u0103ng.", "Thi\u1ebfu m\u1ed9t l\u01b0u/ t\u1ea3i b\u00ean ngo\u00e0i, v\u00e0 kh\u1ea3 n\u0103ng t\u1ea1m d\u1eebng v\u00f2ng l\u1eb7p & kh\u1ea3 n\u0103ng ph\u1ee5c h\u1ed3i cho c\u00e1c m\u00f4 h\u00ecnh \u0111\u1eaft ti\u1ec1n t\u00ednh to\u00e1n- m\u1ed9t c\u01a1n \u00e1c m\u1ed9ng.", "B\u1ea5t k\u1ec3, cu\u1ed1i c\u00f9ng ph\u1ee5 thu\u1ed9c v\u00e0o nhu c\u1ea7u c\u1ee5 th\u1ec3 c\u1ee7a b\u1ea1n, v\u00e0 l\u1ea1c \u0111\u1ec1; c\u00e1ch ch\u1eafc ch\u1eafn nh\u1ea5t \u0111\u1ec3 ki\u1ec3m tra hi\u1ec7u n\u0103ng v\u1edbi fit  generator\u1ee9ng d\u1ee5ng c\u1ee7a b\u1ea1n l\u00e0, ki\u1ec3m tra n\u00f3.", "\u2014OverLordGoldDragon47TR\u1ea2 L\u1edcI N\u00c0Y: nh\u1eb1m m\u1ee5c \u0111\u00edch cung c\u1ea5p m\u1ed9t m\u00f4 t\u1ea3 chi ti\u1ebft, m\u1ee9c \u0111\u1ed9 \u0111\u1ed3 th\u1ecb/ ph\u1ea7n c\u1ee9ng c\u1ee7a v\u1ea5n \u0111\u1ec1- bao g\u1ed3m c\u00e1c v\u00f2ng l\u1eb7p TF2 so v\u1edbi TF1, b\u1ed9 x\u1eed l\u00fd d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o v\u00e0 th\u1ef1c thi ch\u1ebf \u0111\u1ed9 Eager so v\u1edbi \u0111\u1ed3 th\u1ecb.", "\u0110\u1ec3 bi\u1ebft t\u00f3m t\u1eaft v\u1ec1 v\u1ea5n \u0111\u1ec1 v\u00e0 h\u01b0\u1edbng d\u1eabn gi\u1ea3i quy\u1ebft, h\u00e3y xem c\u00e2u tr\u1ea3 l\u1eddi kh\u00e1c c\u1ee7a t\u00f4i.", "X\u00c1C MINH TH\u1ef0C HI\u1ec6N: \u0111\u00f4i khi c\u00e1i n\u00e0y nhanh h\u01a1n, \u0111\u00f4i khi c\u00e1i kia, tu\u1ef3 thu\u1ed9c v\u00e0o c\u1ea5u h\u00ecnh.", "Theo nh\u01b0 TF2 so v\u1edbi TF1, h\u1ecd trung b\u00ecnh ngang nhau, nh\u01b0ng s\u1ef1 kh\u00e1c bi\u1ec7t \u0111\u00e1ng k\u1ec3 d\u1ef1a tr\u00ean c\u1ea5u h\u00ecnh v\u1eabn t\u1ed3n t\u1ea1i v\u00e0 TF1 v\u01b0\u1ee3t qua TF2 th\u01b0\u1eddng xuy\u00ean h\u01a1n so v\u1edbi ng\u01b0\u1ee3c l\u1ea1i.", "Xem  \"L\u1ee2I \u00cdCH\" b\u00ean d\u01b0\u1edbi.EAGER VS.GRAPH: ph\u1ea7n c\u1ed1t l\u00f5i c\u1ee7a to\u00e0n b\u1ed9 c\u00e2u tr\u1ea3 l\u1eddi n\u00e0y \u0111\u1ed1i v\u1edbi m\u1ed9t s\u1ed1 ng\u01b0\u1eddi: S\u1ef1 h\u00e1o h\u1ee9c c\u1ee7a TF2 ch\u1eadm h\u01a1n so v\u1edbi TF1, theo th\u1eed nghi\u1ec7m c\u1ee7a t\u00f4i.", "Chi ti\u1ebft ti\u1ebfp t\u1ee5c xu\u1ed1ng.S\u1ef1 kh\u00e1c bi\u1ec7t c\u01a1 b\u1ea3n gi\u1eefa hai lo\u1ea1i n\u00e0y l\u00e0: \u0110\u1ed3 th\u1ecb thi\u1ebft l\u1eadp m\u1ed9t m\u1ea1ng t\u00ednh to\u00e1n m\u1ed9t c\u00e1ch ch\u1ee7 \u0111\u1ed9ng v\u00e0 th\u1ef1c thi khi \u0111\u01b0\u1ee3c' n\u00f3i v\u1edbi'- trong khi Eager th\u1ef1c thi m\u1ecdi th\u1ee9 khi t\u1ea1o.", "Nh\u01b0ng c\u00e2u chuy\u1ec7n ch\u1ec9 b\u1eaft \u0111\u1ea7u t\u1eeb \u0111\u00e2y:", "H\u00e1o h\u1ee9c KH\u00d4NG ph\u1ea3i l\u00e0 kh\u00f4ng c\u00f3 \u0111\u1ed3 th\u1ecb, v\u00e0 tr\u00ean th\u1ef1c t\u1ebf c\u00f3 th\u1ec3 ch\u1ee7 y\u1ebfu l\u00e0 \u0111\u1ed3 th\u1ecb, tr\u00e1i v\u1edbi d\u1ef1 \u0111o\u00e1n.", "Ph\u1ea7n l\u1edbn l\u00e0 g\u00ec, \u0111\u01b0\u1ee3c th\u1ef1c hi\u1ec7n Bi\u1ec3u \u0111\u1ed3- bao g\u1ed3m tr\u1ecdng l\u01b0\u1ee3ng m\u00f4 h\u00ecnh & t\u1ed1i \u01b0u ho\u00e1, bao g\u1ed3m m\u1ed9t ph\u1ea7n l\u1edbn c\u1ee7a bi\u1ec3u \u0111\u1ed3.", "H\u00e1o h\u1ee9c x\u00e2y d\u1ef1ng l\u1ea1i m\u1ed9t ph\u1ea7n c\u1ee7a \u0111\u1ed3 th\u1ecb ri\u00eang khi th\u1ef1c hi\u1ec7n; h\u1eadu qu\u1ea3 tr\u1ef1c ti\u1ebfp c\u1ee7a \u0111\u1ed3 th\u1ecb kh\u00f4ng \u0111\u01b0\u1ee3c x\u00e2y d\u1ef1ng \u0111\u1ea7y \u0111\u1ee7- xem k\u1ebft qu\u1ea3 h\u1ed3 s\u01a1.", "\u0110i\u1ec1u n\u00e0y c\u00f3 m\u1ed9t chi ph\u00ed t\u00ednh to\u00e1n.", "H\u00e1o h\u1ee9c l\u00e0 \u0111\u1ea7u v\u00e0o w/ Numpy ch\u1eadm h\u01a1n; theo nh\u1eadn x\u00e9t v\u00e0 m\u00e3 Git n\u00e0y, c\u00e1c \u0111\u1ea7u v\u00e0o Numpy trong Eager bao g\u1ed3m chi ph\u00ed \u0111\u1ea7u t\u01b0 sao ch\u00e9p c\u00e1c b\u1ed9 c\u0103ng t\u1eeb CPU sang GPU.", "B\u01b0\u1edbc qua m\u00e3 ngu\u1ed3n, s\u1ef1 kh\u00e1c bi\u1ec7t x\u1eed l\u00fd d\u1eef li\u1ec7u l\u00e0 r\u00f5 r\u00e0ng; H\u00e1o h\u1ee9c tr\u1ef1c ti\u1ebfp v\u01b0\u1ee3t qua Numpy, trong khi \u0111\u1ed3 th\u1ecb v\u01b0\u1ee3t qua c\u00e1c tenx\u01a1 m\u00e0 sau \u0111\u00f3 \u0111\u00e1nh gi\u00e1 th\u00e0nh Numpy; kh\u00f4ng ch\u1eafc ch\u1eafn v\u1ec1 quy tr\u00ecnh ch\u00ednh x\u00e1c, nh\u01b0ng sau \u0111\u00f3 s\u1ebd li\u00ean quan \u0111\u1ebfn t\u1ed1i \u01b0u ho\u00e1 m\u1ee9c GPU", "TF2 Eager ch\u1eadm h\u01a1n TF1 Eager- \u0111i\u1ec1u n\u00e0y... th\u1eadt b\u1ea5t ng\u1edd.", "Xem k\u1ebft qu\u1ea3 \u0111i\u1ec3m chu\u1ea9n d\u01b0\u1edbi \u0111\u00e2y.S\u1ef1 kh\u00e1c bi\u1ec7t k\u00e9o d\u00e0i t\u1eeb kh\u00f4ng \u0111\u00e1ng k\u1ec3 \u0111\u1ebfn \u0111\u00e1ng k\u1ec3, nh\u01b0ng l\u00e0 nh\u1ea5t qu\u00e1n.", "Kh\u00f4ng ch\u1eafc ch\u1eafn t\u1ea1i sao l\u1ea1i nh\u01b0 v\u1eady- n\u1ebfu m\u1ed9t nh\u00e0 ph\u00e1t tri\u1ec3n TF l\u00e0m r\u00f5, s\u1ebd c\u1eadp nh\u1eadt c\u00e2u tr\u1ea3 l\u1eddi.", "TF2 so v\u1edbi TF1: tr\u00edch d\u1eabn c\u00e1c ph\u1ea7n c\u00f3 li\u00ean quan c\u1ee7a m\u1ed9t nh\u00e0 ph\u00e1t tri\u1ec3n TF, Q. Scott Zhu, ph\u1ea3n h\u1ed3i- v\u1edbi s\u1ef1 nh\u1ea5n m\u1ea1nh v\u00e0 vi\u1ebft l\u1ea1i c\u1ee7a t\u00f4i:", "Trong h\u00e1o h\u1ee9c, b\u1ed9 th\u1ef1c thi c\u1ea7n th\u1ef1c thi c\u00e1c op v\u00e0 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb s\u1ed1 cho m\u1ed7i d\u00f2ng m\u00e3 python.", "B\u1ea3n ch\u1ea5t c\u1ee7a th\u1ef1c hi\u1ec7n b\u01b0\u1edbc \u0111\u01a1n l\u00e0m cho n\u00f3 b\u1ecb ch\u1eadm.", "Trong TF2, Keras t\u1eadn d\u1ee5ng tf.feft \u0111\u1ec3 x\u00e2y d\u1ef1ng bi\u1ec3u \u0111\u1ed3 c\u1ee7a n\u00f3 \u0111\u1ec3 \u0111\u00e0o t\u1ea1o, \u0111\u00e1nh gi\u00e1 v\u00e0 d\u1ef1 \u0111o\u00e1n.", "Ch\u00fang t\u00f4i g\u1ecdi ch\u00fang l\u00e0  \"h\u00e0m th\u1ef1c thi\" cho m\u00f4 h\u00ecnh.", "Trong TF1,  \"h\u00e0m th\u1ef1c thi\" l\u00e0 m\u1ed9t FuncGraph, chia s\u1ebb m\u1ed9t s\u1ed1 th\u00e0nh ph\u1ea7n ph\u1ed5 bi\u1ebfn l\u00e0 h\u00e0m TF, nh\u01b0ng c\u00f3 c\u00e1ch tri\u1ec3n khai kh\u00e1c.", "Trong qu\u00e1 tr\u00ecnh n\u00e0y, b\u1eb1ng c\u00e1ch n\u00e0o \u0111\u00f3, ch\u00fang t\u00f4i \u0111\u00e3 \u0111\u1ec3 l\u1ea1i m\u1ed9t tri\u1ec3n khai kh\u00f4ng ch\u00ednh x\u00e1c cho train  on  batch  (), test   on  batch  () v\u00e0 d\u1ef1 \u0111o\u00e1n   on  batch  ().", "Ch\u00fang v\u1eabn \u0111\u00fang v\u1ec1 m\u1eb7t s\u1ed1, nh\u01b0ng h\u00e0m th\u1ef1c thi cho x  on  batch l\u00e0 m\u1ed9t h\u00e0m python thu\u1ea7n, ch\u1ee9 kh\u00f4ng ph\u1ea3i l\u00e0 h\u00e0m python \u0111\u01b0\u1ee3c b\u1ecdc b\u1edfi tf.feft. \u0110i\u1ec1u n\u00e0y s\u1ebd g\u00e2y ra s\u1ef1 ch\u1eadm ch\u1ea1p", "Trong TF2, ch\u00fang t\u00f4i chuy\u1ec3n \u0111\u1ed5i t\u1ea5t c\u1ea3 d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o th\u00e0nh tf.data.Dataset, qua \u0111\u00f3 ch\u00fang t\u00f4i c\u00f3 th\u1ec3 th\u1ed1ng nh\u1ea5t ch\u1ee9c n\u0103ng th\u1ef1c thi c\u1ee7a m\u00ecnh \u0111\u1ec3 x\u1eed l\u00fd lo\u1ea1i \u0111\u1ea7u v\u00e0o duy nh\u1ea5t.", "C\u00f3 th\u1ec3 c\u00f3 m\u1ed9t s\u1ed1 chi ph\u00ed trong qu\u00e1 tr\u00ecnh chuy\u1ec3n \u0111\u1ed5i t\u1eadp d\u1eef li\u1ec7u v\u00e0 t\u00f4i ngh\u0129 r\u1eb1ng \u0111\u00e2y ch\u1ec9 l\u00e0 chi ph\u00ed m\u1ed9t l\u1ea7n duy nh\u1ea5t, thay v\u00ec chi ph\u00ed m\u1ed7i \u0111\u1ee3t", "V\u1edbi c\u00e2u cu\u1ed1i c\u00f9ng c\u1ee7a \u0111o\u1ea1n cu\u1ed1i \u1edf tr\u00ean v\u00e0 m\u1ec7nh \u0111\u1ec1 cu\u1ed1i c\u1ee7a \u0111o\u1ea1n d\u01b0\u1edbi \u0111\u00e2y:", "\u0110\u1ec3 kh\u1eafc ph\u1ee5c s\u1ef1 ch\u1eadm ch\u1ea1p trong ch\u1ebf \u0111\u1ed9 h\u00e1o h\u1ee9c, ch\u00fang ta c\u00f3 @ tf.feft, n\u00f3 s\u1ebd bi\u1ebfn m\u1ed9t h\u00e0m python th\u00e0nh m\u1ed9t bi\u1ec3u \u0111\u1ed3.", "Khi cung c\u1ea5p gi\u00e1 tr\u1ecb s\u1ed1 nh\u01b0 m\u1ea3ng np, ph\u1ea7n th\u00e2n c\u1ee7a tf.feft \u0111\u01b0\u1ee3c chuy\u1ec3n \u0111\u1ed5i th\u00e0nh bi\u1ec3u \u0111\u1ed3 t\u0129nh, \u0111\u01b0\u1ee3c t\u1ed1i \u01b0u ho\u00e1 v\u00e0 tr\u1ea3 v\u1ec1 gi\u00e1 tr\u1ecb cu\u1ed1i c\u00f9ng, nhanh v\u00e0 c\u00f3 hi\u1ec7u su\u1ea5t t\u01b0\u01a1ng t\u1ef1 nh\u01b0 ch\u1ebf \u0111\u1ed9 \u0111\u1ed3 th\u1ecb TF 1.", "T\u00f4i kh\u00f4ng \u0111\u1ed3ng \u00fd- theo k\u1ebft qu\u1ea3 h\u1ed3 s\u01a1 c\u1ee7a t\u00f4i, cho th\u1ea5y qu\u00e1 tr\u00ecnh x\u1eed l\u00fd d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o c\u1ee7a \u0110\u1ea1i b\u00e0ng ch\u1eadm h\u01a1n \u0111\u00e1ng k\u1ec3 so v\u1edbi \u0111\u1ed3 th\u1ecb.", "Ngo\u00e0i ra, kh\u00f4ng ch\u1eafc ch\u1eafn v\u1ec1 tf.data.Datasetc\u1ee5 th\u1ec3, nh\u01b0ng Eager li\u00ean t\u1ee5c g\u1ecdi nhi\u1ec1u ph\u01b0\u01a1ng th\u1ee9c chuy\u1ec3n \u0111\u1ed5i d\u1eef li\u1ec7u gi\u1ed1ng nhau- xem h\u1ed3 s\u01a1.", "Cu\u1ed1i c\u00f9ng, cam k\u1ebft \u0111\u01b0\u1ee3c li\u00ean k\u1ebft c\u1ee7a dev: S\u1ed1 l\u01b0\u1ee3ng thay \u0111\u1ed5i \u0111\u00e1ng k\u1ec3 \u0111\u1ec3 h\u1ed7 tr\u1ee3 c\u00e1c v\u00f2ng l\u1eb7p Keras v2.", "V\u00f2ng l\u1eb7p xe l\u1eeda: tu\u1ef3 thu\u1ed9c v\u00e0o  (1) H\u00e1o h\u1ee9c so v\u1edbi \u0111\u1ed3 th\u1ecb;  (2) \u0111\u1ecbnh d\u1ea1ng d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o, \u0111\u00e0o t\u1ea1o s\u1ebd ti\u1ebfn h\u00e0nh m\u1ed9t v\u00f2ng l\u1eb7p t\u00e0u ri\u00eang bi\u1ec7t- trong TF2  select  training   loop  (),, training.py, m\u1ed9t trong:", "training   v 2.Loop  ()training   distributed.DistributionMultiWorkerTrainingLoop  (", "training   v 2.Loop  ())# multi-worker mode", "# Case 1: distribution strategytraining   distributed.DistributionMultiWorkerTrainingLoop  (", "training   distributed.DistributionSingleWorkerTrainingLoop  ())# Case 2: generator-like. Input is Python generator, or Sequence object,", "# or a non-distributed Dataset or iterator in eager execution.", "training   generator.GeneratorOrSequenceTrainingLoop  ()training   generator.EagerDatasetOrIteratorTrainingLoop  ()", "# Case 3: Symbolic tensors or Numpyarray-like. This includes Datasets and iterators", "# in graph mode  (since they generate symbolic tensors).", "training   generator.GeneratorLikeTrainingLoop  () # Eager", "training   arrays.ArrayLikeTrainingLoop  () # Graph", "M\u1ed7i x\u1eed l\u00fd ph\u00e2n b\u1ed5 t\u00e0i nguy\u00ean kh\u00e1c nhau v\u00e0 ch\u1ecbu h\u1eadu qu\u1ea3 v\u1ec1 hi\u1ec7u su\u1ea5t v\u00e0 kh\u1ea3 n\u0103ng.", "V\u00f2ng l\u1eb7p xe l\u1eeda: fitvs train   on  batch, kerasvstf.keras.", ": m\u1ed7i trong s\u1ed1 b\u1ed1n v\u00f2ng s\u1eed d\u1ee5ng c\u00e1c v\u00f2ng t\u00e0u kh\u00e1c nhau, m\u1eb7c d\u00f9 c\u00f3 l\u1ebd kh\u00f4ng ph\u1ea3i trong m\u1ecdi k\u1ebft h\u1ee3p c\u00f3 th\u1ec3. keras' fit, v\u00ed d\u1ee5, s\u1eed d\u1ee5ng m\u1ed9t d\u1ea1ng fit  loop, v\u00ed d\u1ee5 training   arrays.fit  loop  (), v\u00e0 n\u00f3 train   on  batchc\u00f3 th\u1ec3 s\u1eed d\u1ee5ng K.function  (). tf.kerasc\u00f3 m\u1ed9t h\u1ec7 th\u1ed1ng ph\u00e2n c\u1ea5p ph\u1ee9c t\u1ea1p h\u01a1n \u0111\u01b0\u1ee3c m\u00f4 t\u1ea3 m\u1ed9t ph\u1ea7n trong ph\u1ea7n tr\u01b0\u1edbc.", "Train Loops: t\u00e0i li\u1ec7u- chu\u1ed7i t\u00e0i li\u1ec7u ngu\u1ed3n c\u00f3 li\u00ean quan tr\u00ean m\u1ed9t s\u1ed1 ph\u01b0\u01a1ng th\u1ee9c th\u1ef1c hi\u1ec7n kh\u00e1c nhau:", "Kh\u00f4ng gi\u1ed1ng nh\u01b0 c\u00e1c ho\u1ea1t \u0111\u1ed9ng kh\u00e1c c\u1ee7a TensorFlow, ch\u00fang t\u00f4i kh\u00f4ng chuy\u1ec3n \u0111\u1ed5i \u0111\u1ea7u v\u00e0o s\u1ed1 python th\u00e0nh tenx\u01a1.", "H\u01a1n n\u1eefa, m\u1ed9t bi\u1ec3u \u0111\u1ed3 m\u1edbi \u0111\u01b0\u1ee3c t\u1ea1o cho m\u1ed7i gi\u00e1 tr\u1ecb s\u1ed1 python ri\u00eang bi\u1ec7t", "function kh\u1edfi t\u1ea1o m\u1ed9t bi\u1ec3u \u0111\u1ed3 ri\u00eang cho m\u1ed7i b\u1ed9 h\u00ecnh d\u1ea1ng v\u00e0 ki\u1ec3u d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o duy nh\u1ea5t.", "M\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng tf.feft c\u00f3 th\u1ec3 c\u1ea7n \u00e1nh x\u1ea1 t\u1edbi nhi\u1ec1u bi\u1ec3u \u0111\u1ed3 t\u00ednh to\u00e1n d\u01b0\u1edbi mui xe.", "\u0110i\u1ec1u n\u00e0y ch\u1ec9 \u0111\u01b0\u1ee3c hi\u1ec3n th\u1ecb khi hi\u1ec7u su\u1ea5t  (bi\u1ec3u \u0111\u1ed3 theo d\u00f5i c\u00f3 chi ph\u00ed t\u00ednh to\u00e1n v\u00e0 b\u1ed9 nh\u1edb kh\u00e1c kh\u00f4ng)", "B\u1ed9 x\u1eed l\u00fd d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o: t\u01b0\u01a1ng t\u1ef1 nh\u01b0 tr\u00ean, b\u1ed9 x\u1eed l\u00fd \u0111\u01b0\u1ee3c ch\u1ecdn theo t\u1eebng tr\u01b0\u1eddng h\u1ee3p, tu\u1ef3 thu\u1ed9c v\u00e0o c\u00e1c c\u1edd b\u00ean trong \u0111\u01b0\u1ee3c \u0111\u1eb7t theo c\u1ea5u h\u00ecnh th\u1eddi gian ch\u1ea1y  (ch\u1ebf \u0111\u1ed9 th\u1ef1c thi, \u0111\u1ecbnh d\u1ea1ng d\u1eef li\u1ec7u, chi\u1ebfn l\u01b0\u1ee3c ph\u00e2n ph\u1ed1i).", "Tr\u01b0\u1eddng h\u1ee3p \u0111\u01a1n gi\u1ea3n nh\u1ea5t v\u1edbi Eager, ho\u1ea1t \u0111\u1ed9ng tr\u1ef1c ti\u1ebfp v\u1edbi m\u1ea3ng Numpy.", "\u0110\u1ed1i v\u1edbi m\u1ed9t s\u1ed1 v\u00ed d\u1ee5 c\u1ee5 th\u1ec3, xem c\u00e2u tr\u1ea3 l\u1eddi n\u00e0y.", "K\u00cdCH TH\u01af\u1edaC M\u00d4 H\u00ccNH, K\u00cdCH TH\u01af\u1edaC S\u1ed0 LI\u1ec6U:", "L\u00e0 ng\u01b0\u1eddi quy\u1ebft \u0111o\u00e1n; kh\u00f4ng c\u00f3 c\u1ea5u h\u00ecnh duy nh\u1ea5t \u0111\u0103ng quang ch\u00ednh n\u00f3 tr\u00ean t\u1ea5t c\u1ea3 c\u00e1c k\u00edch th\u01b0\u1edbc m\u00f4 h\u00ecnh v\u00e0 d\u1eef li\u1ec7u.", "K\u00edch th\u01b0\u1edbc d\u1eef li\u1ec7u li\u00ean quan \u0111\u1ebfn k\u00edch th\u01b0\u1edbc m\u00f4 h\u00ecnh l\u00e0 quan tr\u1ecdng; \u0111\u1ed1i v\u1edbi d\u1eef li\u1ec7u & m\u00f4 h\u00ecnh nh\u1ecf, chi ph\u00ed truy\u1ec1n d\u1eef li\u1ec7u  (v\u00ed d\u1ee5: CPU sang GPU) c\u00f3 th\u1ec3 chi\u1ebfm \u01b0u th\u1ebf.", "T\u01b0\u01a1ng t\u1ef1, c\u00e1c b\u1ed9 x\u1eed l\u00fd nh\u1ecf c\u00f3 th\u1ec3 ch\u1ea1y ch\u1eadm h\u01a1n tr\u00ean d\u1eef li\u1ec7u l\u1edbn tr\u00ean m\u1ed7i l\u1ea7n th\u1ed1ng tr\u1ecb th\u1eddi gian chuy\u1ec3n \u0111\u1ed5i d\u1eef li\u1ec7u  (xem", "convert   to  tensortrong  \"H\u1ed2 S\u01a0\")", "T\u1ed1c \u0111\u1ed9 kh\u00e1c nhau tr\u00ean c\u00e1c ph\u01b0\u01a1ng ti\u1ec7n x\u1eed l\u00fd t\u00e0i nguy\u00ean kh\u00e1c nhau c\u1ee7a c\u00e1c v\u00f2ng l\u1eb7p v\u00e0 b\u1ed9 x\u1eed l\u00fd d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o.", "L\u1ee2I \u00cdCH: th\u1ecbt xay.- T\u00e0i li\u1ec7u Word- B\u1ea3ng t\u00ednh Excel", "Thu\u1eadt ng\u1eef:%- less s\u1ed1 l\u00e0 t\u1ea5t c\u1ea3 gi\u00e2y", "% \u0111\u01b0\u1ee3c t\u00ednh l\u00e0  (1- longer  time/ shorter  time)* 100; l\u00fd do: ch\u00fang t\u00f4i quan t\u00e2m b\u1edfi y\u1ebfu t\u1ed1 n\u00e0o nhanh h\u01a1n y\u1ebfu t\u1ed1 kia; shorter/ longerth\u1ef1c s\u1ef1 l\u00e0 m\u1ed9t m\u1ed1i quan h\u1ec7 phi tuy\u1ebfn t\u00ednh, kh\u00f4ng h\u1eefu \u00edch \u0111\u1ec3 so s\u00e1nh tr\u1ef1c ti\u1ebfp", "% x\u00e1c \u0111\u1ecbnh d\u1ea5u hi\u1ec7u:TF2 so v\u1edbi TF 1:+ n\u1ebfu TF2 nhanh h\u01a1n", "GvE  (Bi\u1ec3u \u0111\u1ed3 so v\u1edbi h\u00e1o h\u1ee9c):+ n\u1ebfu Bi\u1ec3u \u0111\u1ed3 nhanh h\u01a1n", "TF2= TensorFlow 2.0.0+ M\u00e1y \u1ea3nh 2.3.1; TF1= TensorFlow 1.14.0+ M\u00e1y \u1ea3nh 2.2.5", "H\u1ed2 S\u01a0:H\u1ed2 S\u01a0- Gi\u1ea3i th\u00edch: Tr\u00ecnh bi\u00ean d\u1ecbch Spyder 3.3.6 IDE.", "M\u1ed9t s\u1ed1 ch\u1ee9c n\u0103ng \u0111\u01b0\u1ee3c l\u1eb7p l\u1ea1i trong t\u1ed5 c\u1ee7a nh\u1eefng ng\u01b0\u1eddi kh\u00e1c; do \u0111\u00f3, th\u1eadt kh\u00f3 \u0111\u1ec3 theo d\u00f5i s\u1ef1 ph\u00e2n t\u00e1ch ch\u00ednh x\u00e1c gi\u1eefa c\u00e1c ch\u1ee9c n\u0103ng  \"x\u1eed l\u00fd d\u1eef li\u1ec7u\" v\u00e0  \"\u0111\u00e0o t\u1ea1o\", do \u0111\u00f3 s\u1ebd c\u00f3 m\u1ed9t s\u1ed1 s\u1ef1 ch\u1ed3ng ch\u00e9o- nh\u01b0 \u0111\u01b0\u1ee3c ph\u00e1t \u00e2m trong k\u1ebft qu\u1ea3 cu\u1ed1i c\u00f9ng.", "% s\u1ed1 li\u1ec7u t\u00ednh to\u00e1n th\u1eddi gian ch\u1ea1y wrt tr\u1eeb th\u1eddi gian x\u00e2y d\u1ef1ng", "X\u00e2y d\u1ef1ng th\u1eddi gian \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng c\u00e1ch t\u00ednh t\u1ed5ng t\u1ea5t c\u1ea3 c\u00e1c th\u1eddi gian ch\u1ea1y  (duy nh\u1ea5t) \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 1 ho\u1eb7c 2 l\u1ea7n", "Th\u1eddi gian \u0111\u00e0o t\u1ea1o \u0111\u01b0\u1ee3c t\u00ednh b\u1eb1ng c\u00e1ch t\u00ednh t\u1ed5ng t\u1ea5t c\u1ea3 c\u00e1c th\u1eddi gian ch\u1ea1y  (duy nh\u1ea5t) \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 c\u00f9ng s\u1ed1 l\u1ea7n v\u1edbi s\u1ed1 l\u1ea7n l\u1eb7p v\u00e0 m\u1ed9t s\u1ed1 th\u1eddi gian ch\u1ea1y c\u1ee7a t\u1ed5 c\u1ee7a ch\u00fang", "C\u00e1c h\u00e0m \u0111\u01b0\u1ee3c \u0111\u1ecbnh h\u00ecnh theo t\u00ean g\u1ed1c c\u1ee7a ch\u00fang, th\u1eadt kh\u00f4ng may  (ngh\u0129a l\u00e0   func= funcs\u1ebd c\u1ea5u h\u00ecnh nh\u01b0 func), k\u1ebft h\u1ee3p trong th\u1eddi gian x\u00e2y d\u1ef1ng- do \u0111\u00f3 c\u1ea7n ph\u1ea3i lo\u1ea1i tr\u1eeb n\u00f3", "M\u00d4I TR\u01af\u1edcNG KI\u1ec2M TRA:M\u00e3 \u0111\u01b0\u1ee3c th\u1ef1c thi \u1edf d\u01b0\u1edbi c\u00f9ng v\u1edbi c\u00e1c t\u00e1c v\u1ee5 n\u1ec1n t\u1ed1i thi\u1ec3u \u0111ang ch\u1ea1y", "GPU \u0111\u00e3 \u0111\u01b0\u1ee3c  \"l\u00e0m n\u00f3ng\" v\u1edbi m\u1ed9t v\u00e0i l\u1ea7n l\u1eb7p tr\u01b0\u1edbc khi l\u1eb7p l\u1ea1i th\u1eddi gian, nh\u01b0 \u0111\u01b0\u1ee3c \u0111\u1ec1 xu\u1ea5t trong b\u00e0i vi\u1ebft n\u00e0y", "CUDA 10.0.130, cuDNN 7.6.0, TensorFlow 1.14.0 v\u00e0 TensorFlow 2.0.0 \u0111\u01b0\u1ee3c x\u00e2y d\u1ef1ng t\u1eeb ngu\u1ed3n, c\u1ed9ng v\u1edbi Anaconda", "Python 3.7.4, IDE Spyder 3.3.6GTX 1070, Windows 10, RAM 24 GB DDR4 2,4 MHz, CPU i 7-7700 HQ 2,8 GHz", "PH\u01af\u01a0NG PH\u00c1P:K\u00edch th\u01b0\u1edbc m\u00f4 h\u00ecnh & k\u00edch th\u01b0\u1edbc d\u1eef li\u1ec7u' nh\u1ecf',' trung b\u00ecnh' v\u00e0' l\u1edbn'", "S\u1eeda # tham s\u1ed1 cho t\u1eebng k\u00edch th\u01b0\u1edbc m\u00f4 h\u00ecnh, kh\u00f4ng ph\u1ee5 thu\u1ed9c v\u00e0o k\u00edch th\u01b0\u1edbc d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o", "M\u00f4 h\u00ecnh  \"L\u1edbn h\u01a1n\" c\u00f3 nhi\u1ec1u tham s\u1ed1 v\u00e0 l\u1edbp h\u01a1n", "D\u1eef li\u1ec7u  \"L\u1edbn h\u01a1n\" c\u00f3 chu\u1ed7i d\u00e0i h\u01a1n, nh\u01b0ng gi\u1ed1ng nhau batch   sizev\u00e0num  channels", "M\u00f4 h\u00ecnh ch\u1ec9 s\u1eed d\u1ee5ng Conv1D, Densec\u00e1c l\u1edbp' c\u00f3 th\u1ec3 h\u1ecdc \u0111\u01b0\u1ee3c'; RNNs tr\u00e1nh tr\u00ean m\u1ed7i phi\u00ean b\u1ea3n TF. s\u1ef1 kh\u00e1c bi\u1ec7t", "Lu\u00f4n lu\u00f4n ch\u1ea1y m\u1ed9t chuy\u1ebfn t\u00e0u ph\u00f9 h\u1ee3p b\u00ean ngo\u00e0i v\u00f2ng l\u1eb7p \u0111i\u1ec3m chu\u1ea9n, \u0111\u1ec3 b\u1ecf qua m\u00f4 h\u00ecnh & tr\u00ecnh t\u1ed1i \u01b0u ho\u00e1 x\u00e2y d\u1ef1ng bi\u1ec3u \u0111\u1ed3", "Kh\u00f4ng s\u1eed d\u1ee5ng d\u1eef li\u1ec7u th\u01b0a th\u1edbt  (v\u00ed d\u1ee5 layers.Embedding  ()) ho\u1eb7c c\u00e1c m\u1ee5c ti\u00eau th\u01b0a th\u1edbt  (v\u00ed d\u1ee5: SparseCategoricalCrossEntropy  ()", "GI\u1edaI H\u1ea0N: m\u1ed9t c\u00e2u tr\u1ea3 l\u1eddi  \"ho\u00e0n ch\u1ec9nh\" s\u1ebd gi\u1ea3i th\u00edch m\u1ecdi v\u00f2ng l\u1eb7p v\u00e0 v\u00f2ng l\u1eb7p \u0111\u00e0o t\u1ea1o c\u00f3 th\u1ec3, nh\u01b0ng \u0111i\u1ec1u \u0111\u00f3 ch\u1eafc ch\u1eafn v\u01b0\u1ee3t qu\u00e1 kh\u1ea3 n\u0103ng th\u1eddi gian c\u1ee7a t\u00f4i, ti\u1ec1n l\u01b0\u01a1ng kh\u00f4ng t\u1ed3n t\u1ea1i ho\u1eb7c s\u1ef1 c\u1ea7n thi\u1ebft chung.", "C\u00e1c k\u1ebft qu\u1ea3 ch\u1ec9 t\u1ed1t nh\u01b0 ph\u01b0\u01a1ng ph\u00e1p- gi\u1ea3i th\u00edch v\u1edbi m\u1ed9t t\u00e2m tr\u00ed c\u1edfi m\u1edf.", "M\u00c3:import numpy as npimport tensorflow as tfimport random", "from termcolor import cprintfrom time import timefrom tensorflow.keras.layers import Input, Dense, Conv1D", "from tensorflow.keras.layers import Dropout, GlobalAveragePooling1Dfrom tensorflow.keras.models import Model", "from tensorflow.keras.optimizers import Adamimport tensorflow.keras.backend as K# from keras.layers import Input, Dense, Conv1D", "# from keras.layers import Dropout, GlobalAveragePooling1D# from keras.models import Model", "# from keras.optimizers import Adam# import keras.backend as K", "#tf.compat.v1.disable eager execution  ()# tf.enable   eager  execution  ()", "def reset   seeds  (reset   graph  with   backend=None, verbose= 1):", "if reset  graph   with  backend is not None:", "K= reset  graph   with  backend", "K.clear  session  ()tf.compat.v1.reset default graph  ()", "if verbose:print  ( \"KERAS AND TENSORFLOW GRAPHS RESET\")", "np.random.seed  (1)random.seed  (2)if tf.    version      [0] ==' 2':", "tf.random.set seed  (3)else:tf.set   random   seed  (3)", "if verbose:print  ( \"RANDOM SEEDS RESET\")print  ( \"TF version:  {}\". format  (tf.", "version    ))reset   seeds  ()", "def timeit  (func, iterations,* args,  verbose= 0,** kwargs):", "t0= time  ()for  in range  (iterations):", "func  (* args,** kwargs)print  (end='.'* int  (  verbose))", "print  ( \"Time/ iter:%. 4 f sec\"%  ( (time  ()- t 0)/ iterations))", "def make   model  small  (batch  shape):", "ipt= Input  (batch  shape=batch  shape)", "x= Conv 1 D  (128, 40, strides= 4, padding=' same')  (ipt)", "x= GlobalAveragePooling 1 D  ()  (x)", "x= Dropout  (0.5)  (x)x= Dense  (64, activation=' relu')  (x)", "out= Dense  (1,activation=' sigmoid')  (x)model= Model  (ipt, out)", "model.compile  (Adam  (lr= 1 e-4),' binary  crossentropy')", "return modeldef make   model  medium  (batch  shape):", "ipt= Input  (batch  shape=batch  shape)", "x= iptfor filters in  [64, 128, 256, 256, 128, 64]:", "x= Conv 1 D  (filters, 20, strides= 1, padding=' valid')  (x)", "x= GlobalAveragePooling 1 D  ()  (x)", "x= Dense  (256, activation=' relu')  (x)", "x= Dropout  (0.5)  (x)x= Dense  (128, activation=' relu')  (x)", "x= Dense  (64,activation=' relu')  (x)out= Dense  (1,", "activation=' sigmoid')  (x)model= Model  (ipt, out)", "model.compile  (Adam  (lr= 1 e-4),' binary  crossentropy')", "return modeldef make   model  large  (batch  shape):", "ipt= Input  (batch  shape=batch  shape)", "x= Conv 1 D  (64,400, strides= 4, padding=' valid')  (ipt)", "x= Conv 1 D  (128, 200, strides= 1, padding=' valid')  (x)", "for  in range  (40):x= Conv 1 D  (256,", "12, strides= 1, padding=' same')  (x)x= Conv 1 D  (512,", "20, strides= 2, padding=' valid')  (x)x= Conv 1 D  (1028, 10, strides= 2, padding=' valid')  (x)", "x= Conv 1 D  (256,1, strides= 1, padding=' valid')  (x)", "x= GlobalAveragePooling 1 D  ()  (x)", "x= Dense  (256, activation=' relu')  (x)", "x= Dropout  (0.5)  (x)x= Dense  (128, activation=' relu')  (x)", "x= Dense  (64,activation=' relu')  (x)out= Dense  (1,", "activation=' sigmoid')  (x)model= Model  (ipt, out)", "model.compile  (Adam  (lr= 1 e-4),' binary  crossentropy')", "return modeldef make  data  (batch  shape):", "return np.random.randn  (* batch  shape),\\np.random.randint  (0, 2,  (batch  shape  [0], 1))", "def make  data  tf  (batch  shape, n  batches, iters):", "data= np.random.randn  (n  batches,* batch  shape),", "trgt= np.random.randint  (0, 2,  (n  batches, batch  shape  [0], 1))", "return tf.data.Dataset.from tensor slices  ( (data, trgt)) #. repeat  (iters)", "batch   shape  small=  (32, 140,", "30)batch   shape  medium=  (32, 1400,", "30)batch   shape  large=  (32, 14000, 30)", "batch   shapes= batch  shape  small, batch  shape  medium, batch  shape  large", "make   model  fns= make   model  small, make   model  medium, make   model  large", "iterations=  [200, 100, 50]shape   names=  [ \"Small data\",", "\"Medium data\", \"Large data\"]model   names=  [ \"Small model\",  \"Medium model\",  \"Large model\"]", "def test  all  (fit=False, tf   dataset=False):", "for model   fn, model  name, iters in zip  (make   model  fns, model  names, iterations):", "for batch  shape, shape  name in zip  (batch   shapes, shape  names):", "if  (model  fn is make   model  large) and  (batch   shape is batch  shape  small):", "continuereset   seeds  (reset  graph   with  backend=K)", "if tf  dataset:data= make  data  tf  (batch  shape, iters, iters)", "else:data= make  data  (batch  shape)", "model= model   fn  (batch  shape)", "if fit:if tf  dataset:model.train   on  batch  (data.take  (1))", "t0= time  ()model.fit  (data, steps   per  epoch=iters)", "print  ( \"Time/ iter:%. 4 f sec\"%  ( (time  ()- t 0)/ iters))", "else:model.train   on  batch  (* data)", "timeit  (model.fit, iters,* data,  verbose= 1, verbose= 0)", "else:model.train   on  batch  (* data)", "timeit  (model.train   on  batch, iters,* data,  verbose= 1)", "cprint  ( \">> { }, { } done < <\\ n\". format  (model  name, shape  name),' blue')", "del modeltest   all  (fit=True, tf   dataset=False)", "\u2014OverLordGoldDragonngu\u1ed3nT\u00f4i kh\u00f4ng ch\u1eafc ch\u1eafn n\u1ebfu m\u00e3 c\u1ee7a b\u1ea1n l\u00e0 ch\u00ednh x\u00e1c.", "T\u00f4i ngh\u0129 r\u1eb1ng c\u00e1c m\u00f4 h\u00ecnh c\u1ee7a b\u1ea1n lu\u00f4n ch\u1ea1y trong ch\u1ebf \u0111\u1ed9 bi\u1ec3u \u0111\u1ed3 k\u1ec3 t\u1eeb khi b\u1ea1n g\u1ecdi model.compilem\u00e0 kh\u00f4ng c\u00f3 run   eagerly=True\u0111\u1ed1i s\u1ed1.", "N\u1ebfu \u1edf ch\u1ebf \u0111\u1ed9 h\u00e1o h\u1ee9c, b\u1ea1n c\u00f3 th\u1ec3 ch\u1ea1y m\u1ed9t ph\u1ea7n m\u00e3 c\u1ee7a m\u00ecnh \u1edf ch\u1ebf \u0111\u1ed9 bi\u1ec3u \u0111\u1ed3 b\u1eb1ng c\u00e1ch s\u1eed d\u1ee5ng tf.function. Do \u0111\u00f3, t\u00f4i ngh\u0129 r\u1eb1ng vi\u1ec7c tri\u1ec3n khai m\u1eb7c \u0111\u1ecbnh compilel\u00e0 t\u1ea1o ra bi\u1ec3u \u0111\u1ed3 t\u00ednh to\u00e1n thay v\u00ec ch\u1ea1y n\u00f3 h\u00e1o h\u1ee9c v\u00ec l\u00fd do hi\u1ec7u su\u1ea5t.", "C\u0169ng l\u01b0u \u00fd r\u1eb1ng n\u1ebfu m\u00f4 h\u00ecnh c\u1ee7a b\u1ea1n l\u00e0 t\u00edch ch\u1eadp th\u00ec b\u1ea1n kh\u00f4ng th\u1ea5y t\u0103ng t\u1ed1c trong ch\u1ebf \u0111\u1ed9 \u0111\u1ed3 th\u1ecb v\u00ec t\u01b0\u01a1ng t\u00e1c python l\u00e0 t\u1ed1i thi\u1ec3u.", "N\u1ebfu b\u1ea1n l\u00e0m nhi\u1ec1u ph\u00e9p to\u00e1n h\u01a1n n\u00f3 c\u00f3 th\u1ec3 t\u1ea1o ra s\u1ef1 kh\u00e1c bi\u1ec7t l\u1edbn  (c\u0169ng trong vi\u1ec7c s\u1eed d\u1ee5ng b\u1ed9 nh\u1edb).", "\u2014d\u00f9ng2781994@ OverLordGoldDragon nh\u01b0ng trong TF 2, ch\u1ebf \u0111\u1ed9 h\u00e1o h\u1ee9c theo m\u1eb7c \u0111\u1ecbnh nh\u01b0ng model.compilekh\u00f4ng run   eagerly=True\u0111\u1ea3m b\u1ea3o ch\u1ebf \u0111\u1ed9 \u0111\u1ed3 th\u1ecb, hay kh\u00f4ng?", "\u2014d\u00f9ng2781994@ OverLordGoldDragon T\u00f4i \u0111\u1ed3ng \u00fd r\u1eb1ng kh\u00f4ng ph\u1ea3i t\u1ea5t c\u1ea3 c\u00e1c ph\u01b0\u01a1ng th\u1ee9c nh\u1eadp kh\u1ea9u \u0111\u1ec1u ch\u1ea1y trong ch\u1ebf \u0111\u1ed9 bi\u1ec3u \u0111\u1ed3 nh\u01b0ng t\u00f4i ngh\u0129 r\u1eb1ng model.compileho\u1eb7c model.fitph\u1ea3i \u0111\u1ea3m b\u1ea3o r\u1eb1ng \u0111\u00e0o t\u1ea1o ch\u1ea1y trong ch\u1ebf \u0111\u1ed9 bi\u1ec3u \u0111\u1ed3 b\u00ean trong.", "\u2014d\u00f9ng2781994@ OverLordGoldDragon TRUE-  \"tf.keras.Model.compile c\u00f3 ba \u0111\u1ed1i s\u1ed1 quan tr\u1ecdng:...", "Ngo\u00e0i ra, \u0111\u1ec3 \u0111\u1ea3m b\u1ea3o m\u00f4 h\u00ecnh \u0111\u00e0o t\u1ea1o v\u00e0 \u0111\u00e1nh gi\u00e1 m\u1ed9t c\u00e1ch h\u00e1o h\u1ee9c, b\u1ea1n c\u00f3 th\u1ec3 \u0111\u1ea3m b\u1ea3o chuy\u1ec3n run  eagerly=Trueth\u00e0nh tham s\u1ed1 \u0111\u1ec3 bi\u00ean d\u1ecbch.", "\" (ngu\u1ed3n tenorflow.org/guide/keras/overview) V\u00ec v\u1eady, n\u1ebfu t\u00f4i kh\u00f4ng v\u01b0\u1ee3t qua run  eagerly=Truem\u00f4 h\u00ecnh th\u00ec c\u00f3 th\u1ec3 ch\u1ea1y \u1edf ch\u1ebf \u0111\u1ed9 \u0111\u1ed3 th\u1ecb.", "T\u00f4i kh\u00f4ng ch\u1eafc y\u1ebfu t\u1ed1 quy\u1ebft \u0111\u1ecbnh l\u00e0 g\u00ec nh\u01b0ng t\u1ea1i sao n\u00f3 kh\u00f4ng ch\u1ea1y trong ch\u1ebf \u0111\u1ed9 \u0111\u1ed3 th\u1ecb n\u1ebfu n\u00f3 hi\u1ec7u qu\u1ea3 h\u01a1n h\u00e1o h\u1ee9c.", "\u2014d\u00f9ng2781994B\u1ea1n c\u00f3 mu\u1ed1n th\u00eam b\u1eb1ng ch\u1ee9ng?:)  \"Theo m\u1eb7c \u0111\u1ecbnh, ch\u00fang t\u00f4i s\u1ebd c\u1ed1 g\u1eafng bi\u00ean d\u1ecbch m\u00f4 h\u00ecnh c\u1ee7a b\u1ea1n th\u00e0nh m\u1ed9t bi\u1ec3u \u0111\u1ed3 t\u0129nh \u0111\u1ec3 mang l\u1ea1i hi\u1ec7u su\u1ea5t th\u1ef1c thi t\u1ed1t nh\u1ea5t.\"  (github.com/tensorflow/tensorflow/blob/r2.0/tensorflow/python/", "\u2014m\u1eb9oKhi s\u1eed d\u1ee5ng trang web c\u1ee7a ch\u00fang t\u00f4i, b\u1ea1n x\u00e1c nh\u1eadn r\u1eb1ng b\u1ea1n \u0111\u00e3 \u0111\u1ecdc v\u00e0 hi\u1ec3u Ch\u00ednh s\u00e1ch cookie v\u00e0 Ch\u00ednh s\u00e1ch b\u1ea3o m\u1eadt c\u1ee7a ch\u00fang t\u00f4i."], "stt": [[1, 0, [], []], [2, 0, [], []], [3, 0, [], []], [4, 0, [], []], [5, 0, [], []], [6, 0, [], []], [7, 0, [], []], [8, 0, [], []], [9, 0, [], []], [10, 0, [], []], [11, 0, [], []], [12, 0, [], []], [13, 0, [], []], [14, 0, [], []], [15, 0, [], []], [16, 0, [], []], [17, 0, [], []], [18, 0, [], []], [19, 0, [], []], [20, 0, [], []], [21, 0, [], []], [22, 0, [], []], [23, 0, [], []], [24, 0, [], []], [25, 0, [], []], [26, 0, [], []], [27, 0, [], []], [28, 0, [], []], [29, 0, [], []], [30, 0, [], []], [31, 0, [], []], [32, 0, [], []], [33, 0, [], []], [34, 0, [], []], [35, 0, [], []], [36, 0, [], []], [37, 0, [], []], [38, 0, [], []], [39, 0, [], []], [40, 0, [], []], [41, 0, [], []], [42, 0, [], []], [43, 0, [], []], [44, 0, [], []], [45, 0, [], []], [46, 0, [], []], [47, 0, [], []], [48, 0, [], []], [49, 0, [], []], [50, 0, [], []], [51, 0, [], []], [52, 0, [], []], [53, 0, [], []], [54, 0, [], []], [55, 0, [], []], [56, 0, [], []], [57, 0, [], []], [58, 0, [], []], [59, 0, [], []], [60, 0, [], []], [61, 0, [], []], [62, 0, [], []], [63, 0, [], []], [64, 0, [], []], [65, 0, [], []], [66, 0, [], []], [67, 0, [], []], [68, 0, [], []], [69, 0, [], []], [70, 0, [], []], [71, 0, [], []], [72, 0, [], []], [73, 0, [], []], [74, 0, [], []], [75, 0, [], []], [76, 0, [], []], [77, 0, [], []], [78, 0, [], []], [79, 0, [], []], [80, 0, [], []], [81, 0, [], []], [82, 0, [], []], [83, 0, [], []], [84, 0, [], []], [85, 0, [], []], [86, 0, [], []], [87, 0, [], []], [88, 0, [], []], [89, 0, [], []], [90, 0, [], []], [91, 0, [], []], [92, 0, [], []], [93, 0, [], []]]}]}